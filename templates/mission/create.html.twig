{% extends 'base.html.twig' %}

{% block title %}Nouvelle Mission{% endblock %}

{% block breadcrumb %}
<ul class="breadcrumb">
	<li class="breadcrumb-item"><a href="{{ path('app_mission_index') }}">MISSIONS</a></li>
	<li class="breadcrumb-item active">NOUVELLE MISSION</li>
</ul>
{% endblock %}

{% block page_title %}
<h1 class="page-header">
	Nouvelle Mission <small>Création d'une nouvelle mission</small>
</h1>
{% endblock %}

{% block buttons %}
<div class="d-flex gap-2">
	<a href="{{ path('app_mission_index') }}" class="btn btn-secondary btn-sm">
		<i class="fa fa-arrow-left"></i> Retour
	</a>
</div>
{% endblock %}

{% block body %}
<div class="row">
	<div class="col-xl-12">
		<div class="card">
			<div class="card-body">
				<!-- Étapes de progression -->
				<div class="mb-4">
					<div class="progress" style="height: 4px;">
						<div class="progress-bar" id="progressBar" role="progressbar" style="width: 20%;" aria-valuenow="20" aria-valuemin="0" aria-valuemax="100"></div>
					</div>
					<div class="d-flex justify-content-between mt-2">
						<span class="step-indicator active" data-step="1">1. Informations générales</span>
						<span class="step-indicator" data-step="2">2. Budget</span>
						<span class="step-indicator" data-step="3">3. Documents</span>
						<span class="step-indicator" data-step="4">4. Récapitulatif</span>
					</div>
				</div>

				<form id="missionCreateForm">
					<!-- Étape 1: Informations générales -->
					<div id="step1" class="step-content">
						<h4 class="mb-3"><i class="fa fa-info-circle text-primary"></i> Informations générales</h4>
						
						<div class="row">
							<div class="col-md-6">
								<div class="mb-3">
									<label for="titre" class="form-label">Titre de la mission *</label>
									<input type="text" class="form-control" id="titre" name="titre" required placeholder="Ex: Mission d'audit sécurité">
								</div>
							</div>
							<div class="col-md-6">
								<div class="mb-3">
									<label for="directionId" class="form-label">Direction responsable *</label>
									<select class="form-select" id="directionId" name="directionId" required>
										<option value="">Choisir une direction</option>
									</select>
								</div>
							</div>
						</div>

						<div class="row">
							<div class="col-md-6">
								<div class="mb-3">
									<label for="fondsId" class="form-label">Fonds *</label>
									<select class="form-select" id="fondsId" name="fondsId" required>
										<option value="">Choisir le type de fonds</option>
									</select>
								</div>
							</div>
							<div class="col-md-6">
								<div class="mb-3">
									<label for="lieuPrevu" class="form-label">Lieu prévu *</label>
									<input type="text" class="form-control" id="lieuPrevu" name="lieuPrevu" required placeholder="Ex: Cotonou, Bénin">
								</div>
							</div>
						</div>

						<div class="row">
							<div class="col-md-6">
								<div class="mb-3">
									<label for="datePrevueDebut" class="form-label">Date de début *</label>
									<input type="date" class="form-control" id="datePrevueDebut" name="datePrevueDebut" required>
								</div>
							</div>
							<div class="col-md-6">
								<div class="mb-3">
									<label for="datePrevueFin" class="form-label">Date de fin *</label>
									<input type="date" class="form-control" id="datePrevueFin" name="datePrevueFin" required>
								</div>
							</div>
						</div>

						<input type="hidden" id="dureePrevue" name="dureePrevue">
						<input type="hidden" id="budgetPrevu" name="budgetPrevu">

						<div class="mb-3">
							<label for="description" class="form-label">Description</label>
							<textarea class="form-control" id="description" name="description" rows="4" placeholder="Détails de la mission..."></textarea>
						</div>
					</div>


					<!-- Étape 2: Budget prévisionnel -->
					<div id="step2" class="step-content" style="display: none;">
						<h4 class="mb-3"><i class="fa fa-money-bill text-primary"></i> Budget prévisionnel</h4>
						<p class="text-muted mb-3">Définissez les dépenses prévues par catégorie</p>
						
						<div class="table-responsive">
							<table class="table table-hover" id="depensesTable">
								<thead class="table-secondary">
									<tr>
										<th>Catégorie de dépense</th>
										<th>Montant prévu (FCFA)</th>
										<th width="100"><i class="fa fa-cogs"></i></th>
									</tr>
								</thead>
								<tbody id="depensesTableBody">
									<!-- Les lignes seront ajoutées dynamiquement -->
								</tbody>
								<tfoot>
									<tr class="table-info">
										<td><strong>Total</strong></td>
										<td><strong id="totalBudget">0 FCFA</strong></td>
										<td></td>
									</tr>
								</tfoot>
							</table>
						</div>
						
						<div class="mt-3">
							<button type="button" class="btn btn-outline-primary btn-sm" onclick="addDepenseRow()">
								<i class="fa fa-plus"></i> Ajouter une ligne
							</button>
						</div>
					</div>

					<!-- Étape 3: Documents/Notes -->
					<div id="step3" class="step-content" style="display: none;">
						<h4 class="mb-3"><i class="fa fa-file-alt text-primary"></i> Documents et Notes</h4>
						
						<!-- Notes -->
						<div class="mb-4">
							<label for="notes" class="form-label">Notes internes</label>
							<textarea class="form-control" id="notes" name="notes" rows="4" placeholder="Notes internes sur la mission..."></textarea>
						</div>

						<!-- Documents -->
						<div class="mb-3">
							<label class="form-label">Documents</label>
							<div class="table-responsive">
								<table class="table table-hover" id="documentsTable">
									<thead class="table-secondary">
																			<tr>
										<th>Nom du document</th>
										<th>Fichier</th>
										<th width="100"><i class="fa fa-cogs"></i></th>
									</tr>
									</thead>
									<tbody id="documentsTableBody">
										<!-- Les lignes seront ajoutées dynamiquement -->
									</tbody>
								</table>
							</div>
							
							<div class="mt-3">
								<button type="button" class="btn btn-outline-primary btn-sm" onclick="addDocumentRow()">
									<i class="fa fa-plus"></i> Ajouter un document
								</button>
							</div>
						</div>
					</div>

					<!-- Étape 4: Récapitulatif -->
					<div id="step4" class="step-content" style="display: none;">
						<h4 class="mb-3"><i class="fa fa-check-circle text-primary"></i> Récapitulatif</h4>
						
						<div id="recapContent">
							<!-- Le contenu sera généré dynamiquement -->
						</div>
					</div>

					<!-- Navigation des étapes -->
					<div class="d-flex justify-content-between mt-4">
						<button type="button" class="btn btn-secondary" id="prevBtn" onclick="previousStep()" style="display: none;">
							<i class="fa fa-arrow-left"></i> Précédent
						</button>
						<button type="button" class="btn btn-primary" id="nextBtn" onclick="nextStep()">
							Suivant <i class="fa fa-arrow-right"></i>
						</button>
						<button type="submit" class="btn btn-success" id="submitBtn" style="display: none;">
							<i class="fa fa-save"></i> Créer la Mission
						</button>
					</div>
				</form>
			</div>
		</div>
	</div>
</div>
{% endblock %}

{% block javascripts %}
<script>
let currentStep = 1;
let totalSteps = 4;
let depenses = [];
let documents = [];

// Initialisation au chargement de la page
document.addEventListener('DOMContentLoaded', function() {
    // Charger les données de base
    Promise.all([
        loadDirections(),
        loadFonds(),
        loadCategoriesDepenses()
    ]).then(() => {
        // Configurer les événements après le chargement des données
        setupEventListeners();
        
        // Mettre à jour l'affichage
        updateStepDisplay();
    }).catch(error => {
        console.error('Erreur lors du chargement des données:', error);
        // Continuer quand même avec la configuration des événements
        setupEventListeners();
        updateStepDisplay();
    });
});

// Charger les services (pour référence uniquement)
function loadServices() {
    return fetch('/api/services')
        .then(response => response.json())
        .then(data => {
            // Cette fonction n'est plus utilisée car les missions utilisent maintenant les directions
            console.log('Services chargés:', data);
        })
        .catch(error => {
            console.error('Erreur lors du chargement des services:', error);
            throw error;
        });
}

// Charger les types de fonds
function loadFonds() {
    return fetch('/api/fonds')
        .then(response => response.json())
        .then(data => {
            const select = document.getElementById('fondsId');
            if (select) {
                select.innerHTML = '<option value="">Choisir le type de fonds</option>';
                data.forEach(fond => {
                    select.innerHTML += `<option value="${fond.id}">${fond.libelle}</option>`;
                });
            }
        })
        .catch(error => {
            console.error('Erreur lors du chargement des fonds:', error);
            throw error;
        });
}

// Charger les catégories de dépenses
function loadCategoriesDepenses() {
    return fetch('/api/categories-depenses')
        .then(response => response.json())
        .then(data => {
            window.categoriesDepenses = data;
        })
        .catch(error => {
            console.error('Erreur lors du chargement des catégories:', error);
            throw error;
        });
}

// Charger les directions
function loadDirections() {
    return fetch('/api/directions')
        .then(response => response.json())
        .then(data => {
            const select = document.getElementById('directionId');
            if (select) {
                select.innerHTML = '<option value="">Choisir une direction</option>';
                data.forEach(direction => {
                    select.innerHTML += `<option value="${direction.id}">${direction.libelle}</option>`;
                });
            }
        })
        .catch(error => {
            console.error('Erreur lors du chargement des directions:', error);
            throw error;
        });
}

// Configuration des événements
function setupEventListeners() {
    // Calcul automatique de la durée
    const dateDebut = document.getElementById('datePrevueDebut');
    const dateFin = document.getElementById('datePrevueFin');
    if (dateDebut) dateDebut.addEventListener('change', calculateDuration);
    if (dateFin) dateFin.addEventListener('change', calculateDuration);
    
}

// Fonction debounce pour éviter trop de sauvegardes
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

// Calculer la durée automatiquement
function calculateDuration() {
    const debutField = document.getElementById('datePrevueDebut');
    const finField = document.getElementById('datePrevueFin');
    const dureeField = document.getElementById('dureePrevue');
    
    if (!debutField || !finField || !dureeField) {
        console.error('Champs de date non trouvés');
        return;
    }
    
    const debut = debutField.value;
    const fin = finField.value;
    
    if (debut && fin) {
        const dateDebut = new Date(debut);
        const dateFin = new Date(fin);
        const diffTime = Math.abs(dateFin - dateDebut);
        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)) + 1;
        dureeField.value = diffDays;
    } else {
        dureeField.value = '';
    }
}



// Ajouter une ligne de dépense
function addDepenseRow() {
    const tbody = document.getElementById('depensesTableBody');
    const rowId = Date.now();
    
    // Sélectionner la première catégorie par défaut si disponible
    const defaultCategory = window.categoriesDepenses && window.categoriesDepenses.length > 0 ? window.categoriesDepenses[0].id : '';
    
    const row = document.createElement('tr');
    row.id = `depense_${rowId}`;
    row.innerHTML = `
        <td>
            <select class="form-select form-select-sm" name="depenses[][categorieId]" onchange="updateDepense(${rowId}, 'categorieId', this.value)" required>
                <option value="">Choisir une catégorie</option>
                ${window.categoriesDepenses ? window.categoriesDepenses.map(cat => 
                    `<option value="${cat.id}" ${cat.id == defaultCategory ? 'selected' : ''}>${cat.libelle}</option>`
                ).join('') : ''}
            </select>
        </td>
        <td>
            <input type="number" class="form-control form-control-sm" name="depenses[][montant]" min="0" step="1" 
                   placeholder="0" onchange="updateDepense(${rowId}, 'montant', this.value)" 
                   oninput="updateDepenseRealtime(${rowId}, 'montant', this.value)" required>
        </td>
        <td>
            <button type="button" class="btn btn-outline-danger btn-sm" onclick="removeDepenseRow(${rowId})">
                <i class="fa fa-trash"></i>
            </button>
        </td>
    `;
    
    tbody.appendChild(row);
    depenses[rowId] = { categorieId: defaultCategory, montant: 0 };
}

// Mettre à jour une dépense
function updateDepense(rowId, field, value) {
    if (!depenses[rowId]) {
        depenses[rowId] = {};
    }
    depenses[rowId][field] = field === 'montant' ? parseFloat(value) || 0 : value;
    calculateTotalBudget();
}

// Mettre à jour une dépense en temps réel (pour les montants)
function updateDepenseRealtime(rowId, field, value) {
    if (!depenses[rowId]) {
        depenses[rowId] = {};
    }
    depenses[rowId][field] = field === 'montant' ? parseFloat(value) || 0 : value;
    calculateTotalBudgetRealtime();
}

// Supprimer une ligne de dépense
function removeDepenseRow(rowId) {
    const row = document.getElementById(`depense_${rowId}`);
    if (row) {
                row.remove();
                delete depenses[rowId];
                calculateTotalBudget();
            }
}

// Calculer le budget total
function calculateTotalBudget() {
    const total = Object.values(depenses).reduce((sum, depense) => {
        return sum + (depense.montant || 0);
    }, 0);
    
    document.getElementById('totalBudget').textContent = total.toLocaleString('fr-FR') + ' FCFA';
    document.getElementById('budgetPrevu').value = total;
}

// Calculer le budget total en temps réel
function calculateTotalBudgetRealtime() {
    const total = Object.values(depenses).reduce((sum, depense) => {
        return sum + (depense.montant || 0);
    }, 0);
    
    const totalElement = document.getElementById('totalBudget');
    if (totalElement) {
        totalElement.textContent = total.toLocaleString('fr-FR') + ' FCFA';
    }
    
    const budgetInput = document.getElementById('budgetPrevu');
    if (budgetInput) {
        budgetInput.value = total;
        // Déclencher l'événement input pour mettre à jour les autres éléments qui écoutent
        budgetInput.dispatchEvent(new Event('input', { bubbles: true }));
    }
}

// Ajouter une ligne de document
function addDocumentRow() {
    const tbody = document.getElementById('documentsTableBody');
    const rowId = Date.now();
    
    const row = document.createElement('tr');
    row.id = `document_${rowId}`;
    row.innerHTML = `
        <td>
            <input type="text" class="form-control form-control-sm" placeholder="Nom du document" 
                   onchange="updateDocument(${rowId}, 'nom', this.value)">
        </td>
        <td>
            <input type="file" class="form-control form-control-sm" 
                   onchange="updateDocument(${rowId}, 'file', this.files[0])">
        </td>
        <td>
            <button type="button" class="btn btn-outline-danger btn-sm" onclick="removeDocumentRow(${rowId})">
                <i class="fa fa-trash"></i>
            </button>
        </td>
    `;
    
    tbody.appendChild(row);
    documents[rowId] = { nom: '', file: null };
}

// Mettre à jour un document
function updateDocument(rowId, field, value) {
    if (!documents[rowId]) {
        documents[rowId] = {};
    }
    documents[rowId][field] = value;
}

// Supprimer une ligne de document
function removeDocumentRow(rowId) {
    const row = document.getElementById(`document_${rowId}`);
    if (row) {
        row.remove();
        delete documents[rowId];
    }
}

// Navigation vers l'étape suivante
function nextStep() {
    if (validateCurrentStep()) {
        if (currentStep < totalSteps) {
            currentStep++;
            updateStepDisplay();
            
            // Actions spécifiques à chaque étape
            if (currentStep === 4) {
                generateRecap();
            }
        }
    }
}

// Navigation vers l'étape précédente
function previousStep() {
    if (currentStep > 1) {
        currentStep--;
        updateStepDisplay();
    }
}



// Valider l'étape actuelle
function validateCurrentStep() {
    switch (currentStep) {
        case 1:
            return validateStep1();
        case 2:
            return validateStep2();
        case 3:
            return true; // Étape optionnelle
        default:
            return true;
    }
}

// Valider l'étape 1
function validateStep1() {
    const required = ['titre', 'directionId', 'fondsId', 'lieuPrevu', 'datePrevueDebut', 'datePrevueFin'];
    
    for (let field of required) {
        const element = document.getElementById(field);
        if (!element.value) {
            showToast(`Le champ "${element.previousElementSibling.textContent.replace(' *', '')}" est requis.`, 'error');
            element.focus();
            return false;
        }
    }
    
    const debut = new Date(document.getElementById('datePrevueDebut').value);
    const fin = new Date(document.getElementById('datePrevueFin').value);
    
    if (fin <= debut) {
        showToast('La date de fin doit être postérieure à la date de début.', 'error');
        return false;
    }
    
    return true;
}

// Valider l'étape 2 (Budget)
function validateStep2() {
    const validDepenses = Object.values(depenses).filter(d => d.categorieId && d.montant > 0);
    if (validDepenses.length === 0) {
        showToast('Veuillez ajouter au moins une dépense valide.', 'error');
        return false;
    }
    return true;
}

// Générer le récapitulatif
function generateRecap() {
    const recapContent = document.getElementById('recapContent');
    if (!recapContent) {
        console.error('Élément récapitulatif non trouvé');
        return;
    }
    
    
    // Recalculer le nombre de documents
    const documentsCount = Object.keys(documents).filter(key => documents[key] && (documents[key].nom || documents[key].file)).length;
    
    const titreField = document.getElementById('titre');
    const directionField = document.getElementById('directionId');
    const fondsField = document.getElementById('fondsId');
    const lieuField = document.getElementById('lieuPrevu');
    const debutField = document.getElementById('datePrevueDebut');
    const finField = document.getElementById('datePrevueFin');
    const dureeField = document.getElementById('dureePrevue');
    const budgetField = document.getElementById('budgetPrevu');
    const descField = document.getElementById('description');
    const notesField = document.getElementById('notes');
    
    const missionData = {
        titre: titreField ? titreField.value : '',
        direction: directionField && directionField.selectedIndex > 0 ? directionField.options[directionField.selectedIndex].text : '',
        fonds: fondsField && fondsField.selectedIndex > 0 ? fondsField.options[fondsField.selectedIndex].text : '',
        lieu: lieuField ? lieuField.value : '',
        debut: debutField ? debutField.value : '',
        fin: finField ? finField.value : '',
        duree: dureeField ? dureeField.value : '',
        budget: budgetField ? budgetField.value : '0',
        description: descField ? descField.value : '',
        notes: notesField ? notesField.value : ''
    };
    
    recapContent.innerHTML = `
        <div class="row">
            <div class="col-md-6">
                <h5>Informations générales</h5>
                <table class="table table-sm">
                    <tr><td><strong>Titre:</strong></td><td>${missionData.titre}</td></tr>
                    <tr><td><strong>Direction:</strong></td><td>${missionData.direction}</td></tr>
                    <tr><td><strong>Fonds:</strong></td><td>${missionData.fonds}</td></tr>
                    <tr><td><strong>Lieu:</strong></td><td>${missionData.lieu}</td></tr>
                    <tr><td><strong>Dates:</strong></td><td>${missionData.debut} au ${missionData.fin}</td></tr>
                    <tr><td><strong>Durée:</strong></td><td>${missionData.duree} jours</td></tr>
                    <tr><td><strong>Budget:</strong></td><td>${parseInt(missionData.budget || 0).toLocaleString()} FCFA</td></tr>
                </table>
            </div>
            <div class="col-md-6">
                <h5>Description</h5>
                <p>${missionData.description || 'Aucune description'}</p>
                
                <h5>Notes</h5>
                <p>${missionData.notes || 'Aucune note'}</p>
                
                <h5>Documents</h5>
                <p><strong>Nombre de documents:</strong> ${documentsCount}</p>
                ${documentsCount > 0 ? '<ul class="list-unstyled">' + Object.values(documents).filter(doc => doc && (doc.nom || doc.file)).map(doc => `<li>• ${doc.nom || 'Document sans nom'}</li>`).join('') + '</ul>' : '<p class="text-muted">Aucun document ajouté</p>'}
            </div>
        </div>
    `;
}

// Permettre la navigation directe vers une étape en cliquant sur les indicateurs
document.addEventListener('click', function(e) {
    if (e.target.classList.contains('step-indicator')) {
        const targetStep = parseInt(e.target.getAttribute('data-step'));
        if (targetStep && targetStep !== currentStep) {
            // Aller à l'étape cible
            currentStep = targetStep;
            updateStepDisplay();
        }
    }
});

// Mettre à jour l'affichage des étapes
function updateStepDisplay() {
    // Masquer toutes les étapes
    for (let i = 1; i <= totalSteps; i++) {
        const stepElement = document.getElementById(`step${i}`);
        if (stepElement) {
            stepElement.style.display = 'none';
        }
    }
    
    // Afficher l'étape actuelle
    const currentStepElement = document.getElementById(`step${currentStep}`);
    if (currentStepElement) {
        currentStepElement.style.display = 'block';
    }
    
    // Mettre à jour les indicateurs d'étapes
    document.querySelectorAll('.step-indicator').forEach((indicator, index) => {
        const stepNumber = index + 1;
        indicator.classList.remove('active', 'completed');
        
        if (stepNumber === currentStep) {
            indicator.classList.add('active');
        } else if (stepNumber < currentStep) {
            indicator.classList.add('completed');
        }
    });
    
    // Mettre à jour la barre de progression
    const progressBar = document.getElementById('progressBar');
    if (progressBar) {
        const progress = (currentStep / totalSteps) * 100;
        progressBar.style.width = progress + '%';
    }
    
    // Gérer les boutons de navigation
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');
    const submitBtn = document.getElementById('submitBtn');
    
    if (prevBtn) prevBtn.style.display = currentStep > 1 ? 'block' : 'none';
    if (nextBtn) nextBtn.style.display = currentStep < totalSteps ? 'block' : 'none';
    if (submitBtn) submitBtn.style.display = currentStep === totalSteps ? 'block' : 'none';
    
    // Initialiser le tableau des dépenses si on arrive à l'étape 2
    if (currentStep === 2) {
        setTimeout(() => {
            addDepenseRow(); // Ajouter une ligne par défaut
        }, 100);
    }
    
    // Initialiser le tableau des documents si on arrive à l'étape 3
    if (currentStep === 3) {
        setTimeout(() => {
            addDocumentRow();
        }, 50);
    }
    
    // Générer le récapitulatif si c'est la dernière étape
    if (currentStep === totalSteps) {
        setTimeout(() => {
            generateRecap();
        }, 50);
    }
}

// Gestion de la soumission du formulaire
document.getElementById('missionCreateForm').addEventListener('submit', function(e) {
    e.preventDefault();
    
    const submitBtn = document.getElementById('submitBtn');
    const originalText = submitBtn.innerHTML;
    
    // Désactiver le bouton et afficher le spinner
    submitBtn.disabled = true;
    submitBtn.innerHTML = '<i class="fa fa-spinner fa-spin"></i> Création...';
    
    // Recalculer la durée et le budget avant l'envoi
    calculateDuration();
    calculateTotalBudget();
    
    // Validation côté client
    const requiredFields = ['titre', 'directionId', 'fondsId', 'lieuPrevu', 'datePrevueDebut', 'datePrevueFin'];
    for (let field of requiredFields) {
        const element = document.getElementById(field);
        if (!element || !element.value) {
            showToast(`Le champ "${field}" est requis`, 'error');
            submitBtn.disabled = false;
            submitBtn.innerHTML = originalText;
            return;
        }
    }
    
    // Vérifier qu'au moins une dépense est définie
    const validDepenses = Object.values(depenses).filter(d => d.categorieId && d.montant > 0);
    if (validDepenses.length === 0) {
        showToast('Veuillez ajouter au moins une dépense valide', 'error');
        submitBtn.disabled = false;
        submitBtn.innerHTML = originalText;
        return;
    }
    
    // Préparer les données
    const formData = new FormData();
    
    // Données JSON
    const jsonData = {
        titre: document.getElementById('titre').value,
        directionId: document.getElementById('directionId').value,
        fondsId: document.getElementById('fondsId').value,
        lieuPrevu: document.getElementById('lieuPrevu').value,
        datePrevueDebut: document.getElementById('datePrevueDebut').value,
        datePrevueFin: document.getElementById('datePrevueFin').value,
        dureePrevue: document.getElementById('dureePrevue').value,
        budgetPrevu: document.getElementById('budgetPrevu').value,
        description: document.getElementById('description').value,
        notes: document.getElementById('notes').value,
        depenses: validDepenses
    };
    
    formData.append('data', JSON.stringify(jsonData));
    
    // Ajouter les fichiers
    Object.values(documents).forEach((doc, index) => {
        if (doc.nom && doc.file) {
            formData.append(`document_nom_${index}`, doc.nom);
            formData.append(`document_${index}`, doc.file);
        }
    });
    
    // Envoyer les données
    fetch('{{ path('app_mission_new') }}', {
        method: 'POST',
        body: formData
    })
    .then(response => {
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.text().then(text => {
            try {
                return JSON.parse(text);
            } catch (e) {
                console.error('Réponse non-JSON reçue:', text);
                throw new Error('Réponse serveur invalide');
            }
        });
    })
    .then(data => {
        if (data.success) {
            showToast(data.message, 'success');
            setTimeout(() => {
                window.location.href = '{{ path('app_mission_index') }}';
            }, 1500);
        } else {
            showToast(data.message || 'Erreur lors de la création', 'error');
        }
    })
    .catch(error => {
        console.error('Erreur:', error);
        showToast('Erreur lors de la création de la mission: ' + error.message, 'error');
    })
    .finally(() => {
        // Réactiver le bouton
        submitBtn.disabled = false;
        submitBtn.innerHTML = originalText;
    });
});
</script>

<style>
.step-indicator {
    font-size: 0.9rem;
    color: #6c757d;
    cursor: pointer;
    padding: 5px 10px;
    border-radius: 15px;
    transition: all 0.3s ease;
}

.step-indicator.active {
    background-color: #007bff;
    color: white;
}

.step-indicator.completed {
    background-color: #28a745;
    color: white;
}

.step-content {
    min-height: 400px;
}
</style>
{% endblock %}
