{% extends 'base.html.twig' %}

{% block title %}Détail de la Mission{% endblock %}

{% block breadcrumb %}
<ul class="breadcrumb">
	<li class="breadcrumb-item"><a href="{{ path('app_mission_index') }}">MISSIONS</a></li>
	<li class="breadcrumb-item active">DÉTAIL</li>
</ul>
{% endblock %}

{% block page_title %}
<h1 class="page-header">
	{{ mission.titre }} <small>Détail de la mission</small>
</h1>
{% endblock %}

{% block buttons %}
<div class="d-flex gap-2">
	<a href="{{ path('app_mission_index') }}" class="btn btn-secondary btn-sm">
		<i class="fa fa-arrow-left"></i> Retour
	</a>
	{% if mission.statutActivite and mission.statutActivite.code != 'prevue_executee' %}
	<a href="{{ path('app_mission_edit', {'id': mission.id}) }}" class="btn btn-warning btn-sm">
		                <i class="fa fa-edit text-warning"></i> Modifier
	</a>
	{% endif %}
	{% if mission.statutActivite and mission.statutActivite.code == 'prevue_non_executee' %}
	<a href="{{ path('app_mission_realisation', {'id': mission.id}) }}" class="btn btn-success btn-sm">
		<i class="fa fa-check-circle"></i> Marquer comme réalisée
	</a>
	{% endif %}
</div>
{% endblock %}

{% block body %}
<div class="row">
	<div class="col-xl-12">
		<!-- Informations générales -->
		<div class="card mb-4">
			<div class="card-header">
				<h5 class="card-title mb-0">
					<i class="fa fa-info-circle text-primary"></i> Informations générales
				</h5>
			</div>
			<div class="card-body">
				<div class="row">
					<div class="col-md-6">
						<table class="table table-borderless">
							<tr>
								<td><strong>Titre :</strong></td>
								<td>{{ mission.titre }}</td>
							</tr>
							<tr>
								<td><strong>Direction :</strong></td>
								<td>{{ mission.direction ? mission.direction.libelle : '-' }}</td>
							</tr>
							<tr>
								<td><strong>Fonds :</strong></td>
								<td>{{ mission.fonds ? mission.fonds.libelle : '-' }}</td>
							</tr>
							<tr>
								<td><strong>Lieu prévu :</strong></td>
								<td>{{ mission.lieuPrevu }}</td>
							</tr>
						</table>
					</div>
					<div class="col-md-6">
						<table class="table table-borderless">
							<tr>
								<td><strong>Date de début :</strong></td>
								<td>{{ mission.datePrevueDebut ? mission.datePrevueDebut|date('d/m/Y') : '-' }}</td>
							</tr>
							<tr>
								<td><strong>Date de fin :</strong></td>
								<td>{{ mission.datePrevueFin ? mission.datePrevueFin|date('d/m/Y') : '-' }}</td>
							</tr>
							<tr>
								<td><strong>Durée prévue :</strong></td>
								<td>{{ mission.dureePrevue }} jours</td>
							</tr>
							<tr>
								<td><strong>Budget prévu :</strong></td>
								<td>{{ mission.budgetPrevu ? mission.budgetPrevu|number_format(0, ',', ' ') : '0' }} FCFA</td>
							</tr>
							<tr>
								<td><strong>Statut :</strong></td>
								<td>
									{% if mission.statutActivite %}
										<span class="badge bg-{{ mission.statutActivite.couleur }}">
											{{ mission.statutActivite.libelle }}
										</span>
									{% else %}
										<span class="badge bg-secondary">Non défini</span>
									{% endif %}
								</td>
							</tr>
						</table>
					</div>
				</div>
				{% if mission.description %}
				<div class="mt-3">
					<strong>Description :</strong>
					<p class="mb-0">{{ mission.description }}</p>
				</div>
				{% endif %}
			</div>
		</div>

		<!-- Participants -->
		<div class="card mb-4">
			<div class="card-header d-flex justify-content-between align-items-center">
				<h5 class="card-title mb-0">
					<i class="fa fa-users text-primary"></i> Participants ({{ mission.userMissions|length }})
				</h5>
				{% if mission.statutActivite and mission.statutActivite.code != 'prevue_executee' %}
				<button type="button" class="btn btn-primary btn-sm" onclick="openAddParticipantModal()">
					<i class="fa fa-plus"></i> Ajouter un participant
				</button>
				{% endif %}
			</div>
			<div class="card-body">
				{% if mission.userMissions|length > 0 %}
				<div class="table-responsive">
					<table class="table table-hover">
						<thead class="table-secondary">
							<tr>
								<th>Matricule</th>
								<th>Nom</th>
								<th>Prénom</th>
								<th>Email</th>
								<th>Statut d'exécution</th>
							</tr>
						</thead>
						<tbody>
							{% for userMission in mission.userMissions %}
							<tr>
								<td>{{ userMission.user.matricule ?: '-' }}</td>
								<td>{{ userMission.user.nom }}</td>
								<td>{{ userMission.user.prenom }}</td>
								<td>{{ userMission.user.email }}</td>
								<td>
									{% if userMission.statutParticipation %}
										<span class="badge bg-{{ userMission.statutParticipation.couleur }}">
											{{ userMission.statutParticipation.libelle }}
										</span>
									{% else %}
										<span class="badge bg-secondary">Non défini</span>
									{% endif %}
								</td>
							</tr>
							{% endfor %}
						</tbody>
					</table>
				</div>
				{% else %}
				<p class="text-muted mb-0">Aucun participant assigné à cette mission.</p>
				{% endif %}
			</div>
		</div>

		<!-- Dépenses prévues -->
		<div class="card mb-4">
			<div class="card-header d-flex justify-content-between align-items-center">
				<h5 class="card-title mb-0">
					<i class="fa fa-money-bill text-primary"></i> Dépenses prévues
				</h5>
				{% if mission.statutActivite and mission.statutActivite.code != 'prevue_executee' %}
				<button type="button" class="btn btn-primary btn-sm" onclick="openAddDepenseModal()">
					<i class="fa fa-plus"></i> Ajouter une dépense
				</button>
				{% endif %}
			</div>
			<div class="card-body">
				{% if mission.depenseMissions|length > 0 %}
				<div class="table-responsive">
					<table class="table table-hover">
						<thead class="table-secondary">
							<tr>
								<th>Catégorie</th>
								<th>Montant prévu (FCFA)</th>
							</tr>
						</thead>
						<tbody>
							{% for depenseMission in mission.depenseMissions %}
							<tr>
								<td>{{ depenseMission.categorie.libelle }}</td>
								<td>{{ depenseMission.montantPrevu|number_format(0, ',', ' ') }}</td>
							</tr>
							{% endfor %}
						</tbody>
						<tfoot>
							<tr class="table-info">
								<td><strong>Total</strong></td>
								<td>
									<strong>
										{% set totalPrevu = 0 %}
										{% for depenseMission in mission.depenseMissions %}
											{% set totalPrevu = totalPrevu + depenseMission.montantPrevu %}
										{% endfor %}
										{{ totalPrevu|number_format(0, ',', ' ') }} FCFA
									</strong>
								</td>
							</tr>
						</tfoot>
					</table>
				</div>
				{% else %}
				<p class="text-muted mb-0">Aucune dépense prévue pour cette mission.</p>
				{% endif %}
			</div>
		</div>

		<!-- Documents -->
		<div class="card mb-4">
			<div class="card-header d-flex justify-content-between align-items-center">
				<h5 class="card-title mb-0">
					<i class="fa fa-file-alt text-primary"></i> Documents
				</h5>
				<button type="button" class="btn btn-primary btn-sm" onclick="openAddDocumentModal()">
					<i class="fa fa-plus"></i> Ajouter un document
				</button>
			</div>
			<div class="card-body">
				{% if mission.documentMissions|length > 0 %}
				<div class="table-responsive">
					<table class="table table-hover">
						<thead class="table-secondary">
							<tr>
								<th>Nom</th>
								<th>Type</th>
								<th>Taille</th>
								<th>Date d'upload</th>
								                        <th><i class="fa fa-cogs"></i></th>
							</tr>
						</thead>
						<tbody>
							{% for document in mission.documentMissions %}
							<tr>
								<td>{{ document.nom }}</td>
								<td>{{ document.type }}</td>
								<td>{{ (document.taille / 1024)|round(2) }} KB</td>
								<td>{{ document.dateUpload|date('d/m/Y H:i') }}</td>
								<td>
									<div class="btn-group" role="group">
										{% if document.type starts with 'image/' or document.type == 'application/pdf' or document.type starts with 'text/' %}
										<button type="button" class="btn btn-outline-info btn-sm" onclick="previewDocument('/uploads/documents/{{ document.nomFichier }}', '{{ document.nom }}', '{{ document.type }}')" title="Voir">
											<i class="fa fa-eye"></i>
										</button>
										{% endif %}
										<a href="/uploads/documents/{{ document.nomFichier }}" class="btn btn-outline-primary btn-sm" download title="Télécharger">
											<i class="fa fa-download"></i>
										</a>
									</div>
								</td>
							</tr>
							{% endfor %}
						</tbody>
					</table>
				</div>
				{% else %}
				<p class="text-muted mb-0">Aucun document ajouté à cette mission.</p>
				{% endif %}
			</div>
		</div>

		<!-- Notes -->
		{% if mission.notes %}
		<div class="card mb-4">
			<div class="card-header">
				<h5 class="card-title mb-0">
					<i class="fa fa-sticky-note text-primary"></i> Notes
				</h5>
			</div>
			<div class="card-body">
				<p class="mb-0">{{ mission.notes }}</p>
			</div>
		</div>
		{% endif %}
	</div>
</div>

<!-- Modal de prévisualisation des documents -->
<div class="modal fade" id="documentPreviewModal" tabindex="-1" aria-labelledby="documentPreviewModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-xl">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="documentPreviewModalLabel">Prévisualisation du document</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body" id="documentPreviewContent">
				<!-- Le contenu sera chargé dynamiquement -->
			</div>
		</div>
	</div>
</div>

<!-- Modal d'ajout de document -->
<div class="modal fade" id="addDocumentModal" tabindex="-1" aria-labelledby="addDocumentModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-lg">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="addDocumentModalLabel">Ajouter un document</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<form id="addDocumentForm">
					<div class="mb-3">
						<label for="documentName" class="form-label">Nom du document *</label>
						<input type="text" class="form-control" id="documentName" required>
					</div>
					<div class="mb-3">
						<label for="documentFile" class="form-label">Fichier *</label>
						<input type="file" class="form-control" id="documentFile" required>
					</div>
				</form>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
				<button type="button" class="btn btn-primary" onclick="submitDocument()">
					<i class="fa fa-spinner fa-spin" id="documentSpinner" style="display: none;"></i>
					Ajouter
				</button>
			</div>
		</div>
	</div>
</div>

<!-- Modal d'ajout de dépense -->
<div class="modal fade" id="addDepenseModal" tabindex="-1" aria-labelledby="addDepenseModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-lg">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="addDepenseModalLabel">Ajouter une dépense</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<form id="addDepenseForm">
					<div class="mb-3">
						<label for="depenseCategorie" class="form-label">Catégorie de dépense *</label>
						<select class="form-select" id="depenseCategorie" required>
							<option value="">Choisir une catégorie</option>
						</select>
					</div>
					<div class="mb-3">
						<label for="depenseMontant" class="form-label">Montant (FCFA) *</label>
						<input type="number" class="form-control" id="depenseMontant" min="0" step="1" required>
					</div>
				</form>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
				<button type="button" class="btn btn-primary" onclick="submitDepense()">
					<i class="fa fa-spinner fa-spin" id="depenseSpinner" style="display: none;"></i>
					Ajouter
				</button>
			</div>
		</div>
	</div>
</div>

<!-- Modal d'ajout de participant -->
<div class="modal fade" id="addParticipantModal" tabindex="-1" aria-labelledby="addParticipantModalLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="addParticipantModalLabel">Ajouter un participant</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<form id="addParticipantForm">
					<div class="mb-3">
						<label for="participantUser" class="form-label">Utilisateur *</label>
						<select class="form-control" id="participantUser" name="participantUser" required>
							<option value="">Sélectionner un utilisateur</option>
						</select>
						<small class="form-text text-muted">Seuls les utilisateurs de la direction {{ mission.direction.libelle }} sont affichés</small>
					</div>
				</form>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
				<button type="button" class="btn btn-primary" onclick="submitParticipant()">
					<i class="fa fa-plus"></i> Ajouter
				</button>
			</div>
		</div>
	</div>
</div>
{% endblock %}

{% block javascripts %}
<script>
// Prévisualisation des documents
function previewDocument(url, nom, type) {
    const modal = new bootstrap.Modal(document.getElementById('documentPreviewModal'));
    const content = document.getElementById('documentPreviewContent');
    const title = document.getElementById('documentPreviewModalLabel');
    
    title.textContent = `Prévisualisation - ${nom}`;
    
    if (type.startsWith('image/')) {
        content.innerHTML = `<img src="${url}" class="img-fluid" alt="${nom}">`;
    } else if (type === 'application/pdf') {
        content.innerHTML = `<iframe src="${url}" width="100%" height="600px"></iframe>`;
    } else if (type.startsWith('text/')) {
        fetch(url)
            .then(response => response.text())
            .then(text => {
                content.innerHTML = `<pre class="bg-light p-3">${text}</pre>`;
            })
            .catch(error => {
                content.innerHTML = '<p class="text-danger">Erreur lors du chargement du fichier texte.</p>';
            });
    } else {
        content.innerHTML = '<p class="text-muted">Prévisualisation non disponible pour ce type de fichier.</p>';
    }
    
    modal.show();
}

// Ouvrir le modal d'ajout de document
function openAddDocumentModal() {
    const modal = new bootstrap.Modal(document.getElementById('addDocumentModal'));
    document.getElementById('addDocumentForm').reset();
    modal.show();
}

// Soumettre un document
function submitDocument() {
    const form = document.getElementById('addDocumentForm');
    const formData = new FormData();
    const spinner = document.getElementById('documentSpinner');
    
    formData.append('nom', document.getElementById('documentName').value);
    formData.append('file', document.getElementById('documentFile').files[0]);
    
    if (!formData.get('nom') || !formData.get('file')) {
        showToast('Veuillez remplir tous les champs requis.', 'error');
        return;
    }
    
    spinner.style.display = 'inline-block';
    
    fetch('/mission/{{ mission.id }}/add-document', {
        method: 'POST',
        body: formData
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showToast(data.message, 'success');
            setTimeout(() => {
                window.location.reload();
            }, 1500);
        } else {
            showToast(data.message || 'Erreur lors de l\'ajout du document', 'error');
        }
    })
    .catch(error => {
        console.error('Erreur:', error);
        showToast('Erreur lors de l\'ajout du document', 'error');
    })
    .finally(() => {
        spinner.style.display = 'none';
    });
}

// Ouvrir le modal d'ajout de dépense
function openAddDepenseModal() {
    const modal = new bootstrap.Modal(document.getElementById('addDepenseModal'));
    document.getElementById('addDepenseForm').reset();
    loadCategoriesDepenses();
    modal.show();
}

// Charger les catégories de dépenses
function loadCategoriesDepenses() {
    fetch('/api/categories-depenses')
        .then(response => response.json())
        .then(data => {
            const select = document.getElementById('depenseCategorie');
            select.innerHTML = '<option value="">Choisir une catégorie</option>';
            data.forEach(categorie => {
                select.innerHTML += `<option value="${categorie.id}">${categorie.libelle}</option>`;
            });
        })
        .catch(error => console.error('Erreur:', error));
}

// Soumettre une dépense
function submitDepense() {
    const categorieId = document.getElementById('depenseCategorie').value;
    const montant = document.getElementById('depenseMontant').value;
    const spinner = document.getElementById('depenseSpinner');
    
    if (!categorieId || !montant) {
        showToast('Veuillez remplir tous les champs requis.', 'error');
        return;
    }
    
    spinner.style.display = 'inline-block';
    
    fetch('/mission/{{ mission.id }}/add-depense', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            categorieId: parseInt(categorieId),
            montant: parseFloat(montant)
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showToast(data.message, 'success');
            setTimeout(() => {
                window.location.reload();
            }, 1500);
        } else {
            showToast(data.message || 'Erreur lors de l\'ajout de la dépense', 'error');
        }
    })
    .catch(error => {
        console.error('Erreur:', error);
        showToast('Erreur lors de l\'ajout de la dépense', 'error');
    })
    .finally(() => {
        spinner.style.display = 'none';
    });
}

// Modal pour ajouter un participant
function openAddParticipantModal() {
    const modal = new bootstrap.Modal(document.getElementById('addParticipantModal'));
    document.getElementById('addParticipantForm').reset();
    loadAvailableUsers();
    modal.show();
}

function loadAvailableUsers() {
    const select = document.getElementById('participantUser');
    select.innerHTML = '<option value="">Sélectionner un utilisateur</option>';
    
    fetch(`/api/users-by-direction/{{ mission.direction.id }}`)
        .then(response => response.json())
        .then(data => {
            // Filtrer les utilisateurs déjà participants
            const participantsIds = [{{ mission.userMissions|map(um => um.user.id)|join(', ') }}];
            const availableUsers = data.filter(user => !participantsIds.includes(user.id));
            
            availableUsers.forEach(user => {
                const option = document.createElement('option');
                option.value = user.id;
                option.textContent = `${user.nom} ${user.prenom} (${user.matricule || 'N/A'})`;
                select.appendChild(option);
            });
        })
        .catch(error => {
            console.error('Erreur:', error);
            showToast('Erreur lors du chargement des utilisateurs', 'error');
        });
}

function submitParticipant() {
    const userId = document.getElementById('participantUser').value;
    
    if (!userId) {
        alert('Veuillez sélectionner un utilisateur');
        return;
    }
    
    const data = {
        userId: parseInt(userId)
    };
    
    // Désactiver le bouton pendant l'ajout
    const submitBtn = document.querySelector('#addParticipantModal .btn-primary');
    const originalText = submitBtn.innerHTML;
    submitBtn.innerHTML = '<i class="fa fa-spinner fa-spin"></i> Ajout en cours...';
    submitBtn.disabled = true;
    
    fetch(`/mission/{{ mission.id }}/add-participant`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Fermer le modal
            const modal = bootstrap.Modal.getInstance(document.getElementById('addParticipantModal'));
            modal.hide();
            
            // Afficher le message de succès
            showToast(data.message, 'success');
            
            // Recharger la page pour afficher le nouveau participant
            setTimeout(() => {
                window.location.reload();
            }, 1000);
        } else {
            showToast(data.message || 'Erreur lors de l\'ajout du participant', 'error');
        }
    })
    .catch(error => {
        console.error('Erreur:', error);
        showToast('Erreur lors de l\'ajout du participant', 'error');
    })
    .finally(() => {
        // Réactiver le bouton
        submitBtn.innerHTML = originalText;
        submitBtn.disabled = false;
    });
}
</script>
{% endblock %}
