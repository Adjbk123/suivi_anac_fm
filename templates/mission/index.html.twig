{% extends 'base.html.twig' %}

{% block title %}Missions{% endblock %}

{% block breadcrumb %}
<ul class="breadcrumb">
	<li class="breadcrumb-item active">MISSIONS</li>
</ul>
{% endblock %}

{% block page_title %}
<h1 class="page-header">
	Missions <small>Gestion des missions</small>
</h1>
{% endblock %}

{% block buttons %}
<div class="d-flex gap-2">
	{% if can_create_mission() %}
	<a href="{{ path('app_mission_create') }}" class="btn btn-primary btn-sm">
		<i class="fa fa-plus"></i> Nouvelle Mission
	</a>
	{% endif %}
</div>
{% endblock %}

{% block body %}
<div class="row">
	<div class="col-xl-12">
		<!-- Section des filtres -->
		<div class="card mb-3">
			<div class="card-header">
				<h5 class="card-title mb-0">
					<i class="fa fa-filter"></i> Filtres
				</h5>
			</div>
			<div class="card-body">
				<div class="row">
					<div class="col-md-3">
						<label for="statutFilter" class="form-label">Statut</label>
						<select class="form-select" id="statutFilter">
							<option value="">Tous les statuts</option>
						</select>
					</div>
					<div class="col-md-3">
						<label for="directionFilter" class="form-label">Direction</label>
						<select class="form-select" id="directionFilter">
							<option value="">Toutes les directions</option>
						</select>
					</div>
					<div class="col-md-3">
						<label for="periodeFilter" class="form-label">Période</label>
						<select class="form-select" id="periodeFilter">
							<option value="">Toutes les périodes</option>
							<option value="mois">Ce mois</option>
							<option value="trimestre">Ce trimestre</option>
							<option value="annee">Cette année</option>
						</select>
					</div>
					<div class="col-md-3">
						<label for="participantFilter" class="form-label">Participant</label>
						<select class="form-select" id="participantFilter">
							<option value="">Tous les participants</option>
						</select>
					</div>
				</div>
				<div class="row mt-3">
					<div class="col-12 text-center">
						<button type="button" class="btn btn-primary btn-sm" onclick="applyFilters()">
							<i class="fa fa-search"></i> Appliquer les filtres
						</button>
						<button type="button" class="btn btn-outline-secondary btn-sm" onclick="resetFilters()">
							<i class="fa fa-refresh"></i> Réinitialiser
						</button>
						<button type="button" class="btn btn-warning btn-sm" onclick="exportBudgetReport()">
							<i class="fa fa-chart-line"></i> Rapport Budget
						</button>
					</div>
				</div>
			</div>
		</div>

		<!-- Tableau des missions -->
		<div class="card">
			<div class="card-body">
				<div class="table-responsive">
					<table id="missionsTable" class="table table-hover">
						<thead class="table-secondary">
							<tr>
								<th>Titre</th>
								<th>Direction</th>
								<th>Fonds</th>
								<th>Dates prévues</th>
								<th>Durée</th>
								<th>Budget prévu</th>
								<th>Statut</th>
								                        <th><i class="fa fa-cogs"></i></th>
							</tr>
						</thead>
						<tbody>
							<!-- Les données seront chargées via AJAX -->
						</tbody>
					</table>
				</div>
			</div>
		</div>
	</div>
</div>
{% endblock %}

{% block javascripts %}
<script>
let missionsTable = null;
let filtersData = null;

// Initialiser DataTable au chargement de la page
document.addEventListener('DOMContentLoaded', function() {
    loadFiltersData();
    initializeDataTable();
});

// Charger les données des filtres
function loadFiltersData() {
    fetch("{{ path('app_mission_filters_data') }}")
        .then(response => response.json())
        .then(data => {
            filtersData = data;
            populateFilters();
        })
        .catch(error => {
            console.error('Erreur lors du chargement des données de filtres:', error);
        });
}

// Remplir les filtres avec les données
function populateFilters() {
    if (!filtersData) return;
    
    // Remplir le filtre des statuts
    const statutFilter = document.getElementById('statutFilter');
    filtersData.statuts.forEach(statut => {
        const option = document.createElement('option');
        option.value = statut.id;
        option.textContent = statut.libelle;
        statutFilter.appendChild(option);
    });
    
    // Remplir le filtre des directions
    const directionFilter = document.getElementById('directionFilter');
    filtersData.directions.forEach(direction => {
        const option = document.createElement('option');
        option.value = direction.id;
        option.textContent = direction.libelle;
        directionFilter.appendChild(option);
    });
    
    // Remplir le filtre des participants
    const participantFilter = document.getElementById('participantFilter');
    filtersData.users.forEach(user => {
        const option = document.createElement('option');
        option.value = user.id;
        option.textContent = `${user.nom} ${user.prenom} (${user.email})`;
        participantFilter.appendChild(option);
    });
}

// Initialiser DataTable
function initializeDataTable() {
    // Vérifier que DataTables est bien chargé
    if (typeof $.fn.DataTable === 'undefined') {
        console.error('DataTables n\'est pas chargé');
        return;
    }
    
    // Vérifier que la table existe
    if ($('#missionsTable').length === 0) {
        console.error('Table missionsTable non trouvée');
        return;
    }
    
    // Initialiser DataTable
    missionsTable = $('#missionsTable').DataTable({
            ajax: {
                url: "{{ path('app_mission_list') }}",
                dataSrc: '',
                data: function(d) {
                    // Ajouter les paramètres de filtrage
                    const filters = getFilters();
                    Object.keys(filters).forEach(key => {
                        if (filters[key] && filters[key] !== '') {
                            d[key] = filters[key];
                        }
                    });
                }
            },
            columns: [
                { data: 'titre' },
                { data: 'direction' },
                { data: 'fonds' },
                { 
                    data: null,
                    render: function(data, type, row) {
                        return row.datePrevueDebut + ' - ' + row.datePrevueFin;
                    }
                },
                { data: 'dureePrevue' },
                { data: 'budgetPrevu' },
                { 
                    data: null,
                    render: function(data, type, row) {
                        return `<span class="badge bg-${row.statut_couleur}">${row.statut}</span>`;
                    }
                },
                {
                    data: null,
                    orderable: false,
                    render: function(data, type, row) {
                        return `
                            <div class="dropdown" style="position: relative;">
                                <button class="btn btn-sm btn-outline-secondary" type="button" data-bs-toggle="dropdown" aria-expanded="false" style="position: relative; z-index: 1;">
                                    <i class="fa fa-ellipsis-h"></i>
                                </button>
                                <ul class="dropdown-menu dropdown-menu-end" style="position: absolute; z-index: 99999; right: 0; left: auto;">
                                    <li><a class="dropdown-item" href="/mission/${row.id}">
                                        <i class="fa fa-eye text-info"></i> Voir
                                    </a></li>
                                    ${row.statut_code !== "prevue_executee" ? 
                                        `<li><a class="dropdown-item" href="/mission/${row.id}/edit">
                                            <i class="fa fa-edit text-warning"></i> Modifier
                                        </a></li>` : ""
                                    }
                                    <li><a class="dropdown-item" href="#" onclick="deleteMission(${row.id})">
                                        <i class="fa fa-trash text-danger"></i> Supprimer
                                    </a></li>
                                </ul>
                            </div>
                        `;
                    }
                }
            ],
            language: {
                "sProcessing":     "Traitement en cours...",
                "sSearch":         "Rechercher&nbsp;:",
                "sLengthMenu":     "Afficher _MENU_ éléments",
                "sInfo":           "Affichage de l'élément _START_ à _END_ sur _TOTAL_ éléments",
                "sInfoEmpty":      "Affichage de l'élément 0 à 0 sur 0 élément",
                "sInfoFiltered":   "(filtré de _MAX_ éléments au total)",
                "sLoadingRecords": "Chargement...",
                "sZeroRecords":    "Aucun élément à afficher",
                "sEmptyTable":     "Aucune donnée disponible dans le tableau",
                "oPaginate": {
                    "sFirst":    '<i class="fa fa-angle-double-left" style="font-size: 12px;"></i>',
                    "sPrevious": '<i class="fa fa-angle-left" style="font-size: 12px;"></i>',
                    "sNext":     '<i class="fa fa-angle-right" style="font-size: 12px;"></i>',
                    "sLast":     '<i class="fa fa-angle-double-right" style="font-size: 12px;"></i>'
                },
                "oAria": {
                    "sSortAscending":  ": activer pour trier la colonne par ordre croissant",
                    "sSortDescending": ": activer pour trier la colonne par ordre décroissant"
                }
            },
            responsive: true,
            dom: 'Bfrtip',
            buttons: [
                {
                    extend: 'copy',
                    text: '<i class="fa fa-copy"></i> Copier'
                },
                {
                    extend: 'csv',
                    text: '<i class="fa fa-file-csv"></i> CSV'
                },
                {
                    extend: 'excel',
                    text: '<i class="fa fa-file-excel"></i> Excel'
                },
                {
                    extend: 'pdf',
                    text: '<i class="fa fa-file-pdf"></i> PDF'
                },
                {
                    extend: 'print',
                    text: '<i class="fa fa-print"></i> Imprimer'
                }
            ]
        });

        // Afficher le skeleton loading pendant le chargement
        missionsTable.on('preXhr', function() {
            $('#missionsTable tbody').html(`
                <tr>
                    <td colspan="8" class="text-center">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Chargement...</span>
                        </div>
                    </td>
                </tr>
            `);
        });
    }

// Obtenir les valeurs des filtres
function getFilters() {
    return {
        statut: document.getElementById('statutFilter').value,
        direction: document.getElementById('directionFilter').value,
        periode: document.getElementById('periodeFilter').value,
        participant: document.getElementById('participantFilter').value
    };
}

// Appliquer les filtres
function applyFilters() {
    if (missionsTable) {
        missionsTable.ajax.reload();
    }
}

// Réinitialiser les filtres
function resetFilters() {
    document.getElementById('statutFilter').value = '';
    document.getElementById('directionFilter').value = '';
    document.getElementById('periodeFilter').value = '';
    document.getElementById('participantFilter').value = '';
    
    if (missionsTable) {
        missionsTable.ajax.reload();
    }
}

function exportExcel() {
    const filters = getFilters();
    const url = new URL("{{ path('app_mission_export_excel') }}", window.location.origin);
    
    Object.keys(filters).forEach(key => {
        if (filters[key] && filters[key] !== '') {
            url.searchParams.append(key, filters[key]);
        }
    });
    
    // Ouvrir dans un nouvel onglet pour télécharger le Excel
    window.open(url.toString(), '_blank');
}

function exportBudgetReport() {
    const filters = getFilters();
    const url = new URL("{{ path('app_mission_export_budget_report') }}", window.location.origin);
    
    Object.keys(filters).forEach(key => {
        if (filters[key] && filters[key] !== '') {
            url.searchParams.append(key, filters[key]);
        }
    });
    
    // Ouvrir dans un nouvel onglet pour télécharger le rapport budget
    window.open(url.toString(), '_blank');
}

// Fonction de suppression
function deleteMission(id) {
    if (confirm('Êtes-vous sûr de vouloir supprimer cette mission ?')) {
        fetch(`/mission/${id}`, {
            method: 'DELETE'
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showToast(data.message, 'success');
                missionsTable.ajax.reload();
            } else {
                showToast(data.message || 'Erreur lors de la suppression', 'error');
            }
        })
        .catch(error => {
            console.error('Erreur:', error);
            showToast('Erreur lors de la suppression de la mission', 'error');
        });
    }
}
</script>
{% endblock %}
