{% extends 'base.html.twig' %}

{% block title %}Missions Exécutées{% endblock %}

{% block breadcrumb %}
<ul class="breadcrumb">
	<li class="breadcrumb-item"><a href="{{ path('app_mission_index') }}">MISSIONS</a></li>
	<li class="breadcrumb-item active">MISSIONS EXÉCUTÉES</li>
</ul>
{% endblock %}

{% block page_title %}
<h1 class="page-header">
	Missions Exécutées <small>Suivi des missions réalisées</small>
</h1>
{% endblock %}

{% block buttons %}
<div class="d-flex gap-2">
	<a href="{{ path('app_mission_index') }}" class="btn btn-secondary btn-sm">
		<i class="fa fa-arrow-left"></i> Retour
	</a>
	<a href="{{ path('app_mission_create') }}" class="btn btn-primary btn-sm">
		<i class="fa fa-plus"></i> Nouvelle Mission
	</a>
</div>
{% endblock %}

{% block body %}
<div class="row">
	<div class="col-xl-12">
		<div class="card">
			<div class="card-body">
				<div class="table-responsive">
					<table class="table table-hover" id="missionsExecutedTable">
						<thead class="table-secondary">
							<tr>
								<th>ID</th>
								<th>Titre</th>
								<th>Direction</th>
								<th>Fonds</th>
								<th>Dates réelles</th>
								<th>Lieu réel</th>
								<th>Durée</th>
								<th>Budget prévu</th>
								<th>Dépenses réelles</th>
								<th>Écart</th>
								<th>Statut</th>
								                        <th><i class="fa fa-cogs"></i></th>
							</tr>
						</thead>
						<tbody>
							<!-- Les données seront chargées via AJAX -->
						</tbody>
					</table>
				</div>
			</div>
		</div>
	</div>
</div>
{% endblock %}

{% block javascripts %}
<script>
let missionsExecutedTable = null;

// Initialiser DataTable au chargement de la page
document.addEventListener('DOMContentLoaded', function() {
    initializeDataTable();
    loadMissionsExecuted();
});

// Initialiser DataTable
function initializeDataTable() {
    missionsExecutedTable = $('#missionsExecutedTable').DataTable({
        language: {
            "sProcessing":     "Traitement en cours...",
            "sSearch":         "Rechercher&nbsp;:",
            "sLengthMenu":     "Afficher _MENU_ éléments",
            "sInfo":           "Affichage de l'élément _START_ à _END_ sur _TOTAL_ éléments",
            "sInfoEmpty":      "Affichage de l'élément 0 à 0 sur 0 élément",
            "sInfoFiltered":   "(filtré de _MAX_ éléments au total)",
            "sInfoPostFix":    "",
            "sLoadingRecords": "Chargement...",
            "sZeroRecords":    "Aucun élément à afficher",
            "sEmptyTable":     "Aucune donnée disponible dans le tableau",
            "oPaginate": {
                "sFirst":    '<i class="fa fa-angle-double-left" style="font-size: 12px;"></i>',
                "sPrevious": '<i class="fa fa-angle-left" style="font-size: 12px;"></i>',
                "sNext":     '<i class="fa fa-angle-right" style="font-size: 12px;"></i>',
                "sLast":     '<i class="fa fa-angle-double-right" style="font-size: 12px;"></i>'
            },
            "oAria": {
                "sSortAscending":  ": activer pour trier la colonne par ordre croissant",
                "sSortDescending": ": activer pour trier la colonne par ordre décroissant"
            }
        },
        responsive: false,
        pageLength: 10,
        lengthMenu: [[5, 10, 25, 50, -1], [5, 10, 25, 50, "Tous"]],
        order: [[0, 'asc']],
        columnDefs: [
            {
                targets: -1, // Dernière colonne (Actions)
                orderable: false,
                searchable: false
            }
        ],
        dom: '<"row"<"col-sm-12 col-md-6"l><"col-sm-12 col-md-6"f>>' +
             '<"row"<"col-sm-12"tr>>' +
             '<"row"<"col-sm-12 col-md-5"i><"col-sm-12 col-md-7"p>>',
        buttons: [
            {
                extend: 'copy',
                text: '<i class="fa fa-copy"></i> Copier',
                className: 'btn btn-sm btn-outline-secondary'
            },
            {
                extend: 'csv',
                text: '<i class="fa fa-file-csv"></i> CSV',
                className: 'btn btn-sm btn-outline-secondary'
            },
            {
                extend: 'excel',
                text: '<i class="fa fa-file-excel"></i> Excel',
                className: 'btn btn-sm btn-outline-secondary'
            },
            {
                extend: 'pdf',
                text: '<i class="fa fa-file-pdf"></i> PDF',
                className: 'btn btn-sm btn-outline-secondary'
            },
            {
                extend: 'print',
                text: '<i class="fa fa-print"></i> Imprimer',
                className: 'btn btn-sm btn-outline-secondary'
            }
        ]
    });
}

// Fonction pour charger les missions exécutées
function loadMissionsExecuted() {
    // Afficher le skeleton loading
    const tableContainer = document.querySelector('#missionsExecutedTable').closest('.table-responsive');
    if (tableContainer) {
        tableContainer.style.position = 'relative';
        const skeleton = document.createElement('div');
        skeleton.id = 'skeleton-loading';
        skeleton.innerHTML = `
            <div style="position: absolute; top: 0; left: 0; right: 0; bottom: 0; background: white; z-index: 1000; display: flex; align-items: center; justify-content: center;">
                <div class="text-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Chargement...</span>
                    </div>
                    <div class="mt-2">Chargement des données...</div>
                </div>
            </div>
        `;
        tableContainer.appendChild(skeleton);
    }
    
    fetch('{{ path('app_mission_executed_list') }}')
        .then(response => response.json())
        .then(data => {
            // Masquer le skeleton loading
            const skeleton = document.getElementById('skeleton-loading');
            if (skeleton) {
                skeleton.remove();
            }
            
            // Vider la table DataTable
            missionsExecutedTable.clear();
            
            // Ajouter les données
            data.forEach(mission => {
                const statutBadge = getStatutBadge(mission.statut, mission.statut_couleur);
                const ecart = parseFloat(mission.depensesReelles.replace(/[^\d]/g, '')) - parseFloat(mission.budgetPrevu.replace(/[^\d]/g, ''));
                const ecartClass = ecart > 0 ? 'text-danger' : 'text-success';
                const ecartIcon = ecart > 0 ? 'fa-arrow-up' : 'fa-arrow-down';
                const ecartText = `<span class="${ecartClass}"><i class="fa ${ecartIcon}"></i> ${Math.abs(ecart).toLocaleString('fr-FR')} FCFA</span>`;
                
                missionsExecutedTable.row.add([
                    mission.id,
                    mission.titre,
                    mission.direction,
                    mission.fonds,
                    `${mission.dateReelleDebut} - ${mission.dateReelleFin}`,
                    mission.lieuReel,
                    mission.dureeReelle,
                    mission.budgetPrevu,
                    mission.depensesReelles,
                    ecartText,
                    statutBadge,
                    `<div class="dropdown" style="position: relative;">
                                        <button class="btn btn-sm btn-outline-secondary" type="button" data-bs-toggle="dropdown" aria-expanded="false" style="position: relative; z-index: 1;">
                    <i class="fa fa-ellipsis-h"></i>
                </button>
                        <ul class="dropdown-menu dropdown-menu-end" style="position: absolute; z-index: 99999; right: 0; left: auto;">
                            <li><a class="dropdown-item" href="/mission/${mission.id}">
                                <i class="fa fa-eye text-info"></i> Voir
                            </a></li>
                            <li><a class="dropdown-item" href="/mission/${mission.id}/edit">
                                <i class="fa fa-edit text-warning"></i> Modifier
                            </a></li>
                            <li><a class="dropdown-item" href="#" onclick="updateRealValues(${mission.id})">
                                <i class="fa fa-calendar-check text-info"></i> Mettre à jour
                            </a></li>
                        </ul>
                    </div>`
                ]);
            });
            
            // Redessiner la table
            missionsExecutedTable.draw();
        })
        .catch(error => {
            // Masquer le skeleton loading en cas d'erreur
            const skeleton = document.getElementById('skeleton-loading');
            if (skeleton) {
                skeleton.remove();
            }
            console.error('Erreur:', error);
            showToast('Erreur lors du chargement des missions exécutées', 'error');
        });
}

                // Fonction pour obtenir le badge de statut
                function getStatutBadge(statut, couleur) {
                    return `<span class="badge bg-${couleur}">${statut}</span>`;
                }

// Fonction pour mettre à jour les valeurs réelles
function updateRealValues(missionId) {
    // Rediriger vers une page de mise à jour des valeurs réelles
    window.location.href = `/mission/${missionId}/update-real-values`;
}
</script>
{% endblock %}
