{% extends 'base.html.twig' %}

{% block title %}Gestion des Formations{% endblock %}

{% block breadcrumb %}
<ul class="breadcrumb">
	<li class="breadcrumb-item"><a href="#">GESTION</a></li>
	<li class="breadcrumb-item active">FORMATIONS</li>
</ul>
{% endblock %}

{% block page_title %}
<h1 class="page-header">
	Gestion des Formations <small>Administration des formations</small>
</h1>
{% endblock %}

{% block buttons %}
<div class="d-flex gap-2">
	<a href="{{ path('app_formation_create') }}" class="btn btn-primary btn-sm">
		<i class="fa fa-plus"></i> Nouvelle Formation
	</a>
</div>
{% endblock %}

{% block body %}
<div class="row">
	<div class="col-xl-12">
		<!-- Section des filtres -->
		<div class="card mb-3">
			<div class="card-header">
				<h5 class="card-title mb-0">
					<i class="fa fa-filter"></i> Filtres
				</h5>
			</div>
			<div class="card-body">
				<div class="row">
					<div class="col-md-3">
						<label for="statutFilter" class="form-label">Statut</label>
						<select class="form-select" id="statutFilter">
							<option value="">Tous les statuts</option>
						</select>
					</div>
					<div class="col-md-3">
						<label for="serviceFilter" class="form-label">Service</label>
						<select class="form-select" id="serviceFilter">
							<option value="">Tous les services</option>
						</select>
					</div>
					<div class="col-md-3">
						<label for="periodeFilter" class="form-label">Période</label>
						<select class="form-select" id="periodeFilter">
							<option value="">Toutes les périodes</option>
							<option value="mois">Ce mois</option>
							<option value="trimestre">Ce trimestre</option>
							<option value="annee">Cette année</option>
						</select>
					</div>
					<div class="col-md-3">
						<label for="participantFilter" class="form-label">Participant</label>
						<select class="form-select" id="participantFilter">
							<option value="">Tous les participants</option>
						</select>
					</div>
				</div>
				<div class="row mt-3">
					<div class="col-12">
						<button type="button" class="btn btn-primary btn-sm" onclick="applyFilters()">
							<i class="fa fa-search"></i> Appliquer les filtres
						</button>
						<button type="button" class="btn btn-outline-secondary btn-sm" onclick="resetFilters()">
							<i class="fa fa-refresh"></i> Réinitialiser
						</button>
						<button type="button" class="btn btn-success btn-sm" onclick="exportPdf()">
							<i class="fa fa-file-pdf"></i> Exporter en PDF
						</button>
					</div>
				</div>
			</div>
		</div>

		<!-- Tableau des formations -->
		<div class="card">
			<div class="card-body">
				<div class="table-responsive">
					<table class="table table-hover" id="formationsTable">
						<thead class="table-secondary">
							<tr>
								<th>ID</th>
								<th>Titre</th>
								<th>Service</th>
								<th>Fonds</th>
								<th>Dates prévues</th>
								<th>Durée</th>
								<th>Budget prévu</th>
								<th>Statut</th>
								                        <th><i class="fa fa-cogs"></i></th>
							</tr>
						</thead>
						<tbody>
							<!-- Les données seront chargées via AJAX -->
						</tbody>
					</table>
				</div>
			</div>
		</div>
	</div>
</div>
{% endblock %}

{% block javascripts %}
<script>
let formationsTable = null;
let filtersData = null;

// Initialiser DataTable au chargement de la page
document.addEventListener('DOMContentLoaded', function() {
    initializeDataTable();
    loadFiltersData();
    loadFormations();
});

// Charger les données des filtres
function loadFiltersData() {
    fetch("{{ path('app_formation_filters_data') }}")
        .then(response => response.json())
        .then(data => {
            filtersData = data;
            populateFilters();
        })
        .catch(error => {
            console.error('Erreur lors du chargement des données de filtres:', error);
        });
}

// Remplir les filtres avec les données
function populateFilters() {
    if (!filtersData) return;
    
    // Remplir le filtre des statuts
    const statutFilter = document.getElementById('statutFilter');
    filtersData.statuts.forEach(statut => {
        const option = document.createElement('option');
        option.value = statut.id;
        option.textContent = statut.libelle;
        statutFilter.appendChild(option);
    });
    
    // Remplir le filtre des services
    const serviceFilter = document.getElementById('serviceFilter');
    filtersData.services.forEach(service => {
        const option = document.createElement('option');
        option.value = service.id;
        option.textContent = service.libelle;
        serviceFilter.appendChild(option);
    });
    
    // Remplir le filtre des participants
    const participantFilter = document.getElementById('participantFilter');
    filtersData.users.forEach(user => {
        const option = document.createElement('option');
        option.value = user.id;
        option.textContent = `${user.nom} ${user.prenom} (${user.email})`;
        participantFilter.appendChild(option);
    });
}

// Initialiser DataTable
function initializeDataTable() {
    formationsTable = $('#formationsTable').DataTable({
        language: {
            "sProcessing":     "Traitement en cours...",
            "sSearch":         "Rechercher&nbsp;:",
            "sLengthMenu":     "Afficher _MENU_ éléments",
            "sInfo":           "Affichage de l'élément _START_ à _END_ sur _TOTAL_ éléments",
            "sInfoEmpty":      "Affichage de l'élément 0 à 0 sur 0 élément",
            "sInfoFiltered":   "(filtré de _MAX_ éléments au total)",
            "sLoadingRecords": "Chargement...",
            "sZeroRecords":    "Aucun élément à afficher",
            "sEmptyTable":     "Aucune donnée disponible dans le tableau",
            "oPaginate": {
                "sFirst":    '<i class="fa fa-angle-double-left" style="font-size: 12px;"></i>',
                "sPrevious": '<i class="fa fa-angle-left" style="font-size: 12px;"></i>',
                "sNext":     '<i class="fa fa-angle-right" style="font-size: 12px;"></i>',
                "sLast":     '<i class="fa fa-angle-double-right" style="font-size: 12px;"></i>'
            },
            "oAria": {
                "sSortAscending":  ": activer pour trier la colonne par ordre croissant",
                "sSortDescending": ": activer pour trier la colonne par ordre décroissant"
            }
        },
        responsive: false,
        pageLength: 10,
        lengthMenu: [[5, 10, 25, 50, -1], [5, 10, 25, 50, "Tous"]],
        order: [[0, 'asc']],
        columnDefs: [
            {
                targets: -1, // Dernière colonne (Actions)
                orderable: false,
                searchable: false
            }
        ],
        dom: '<"row"<"col-sm-12 col-md-6"l><"col-sm-12 col-md-6"f>>' +
             '<"row"<"col-sm-12"tr>>' +
             '<"row"<"col-sm-12 col-md-5"i><"col-sm-12 col-md-7"p>>',
        buttons: [
            {
                extend: 'copy',
                text: '<i class="fa fa-copy"></i> Copier',
                className: 'btn btn-sm btn-outline-secondary'
            },
            {
                extend: 'csv',
                text: '<i class="fa fa-file-csv"></i> CSV',
                className: 'btn btn-sm btn-outline-secondary'
            },
            {
                extend: 'excel',
                text: '<i class="fa fa-file-excel"></i> Excel',
                className: 'btn btn-sm btn-outline-secondary'
            },
            {
                extend: 'pdf',
                text: '<i class="fa fa-file-pdf"></i> PDF',
                className: 'btn btn-sm btn-outline-secondary'
            },
            {
                extend: 'print',
                text: '<i class="fa fa-print"></i> Imprimer',
                className: 'btn btn-sm btn-outline-secondary'
            }
        ]
    });
}

// Fonction pour charger les formations avec filtres
function loadFormations(filters = {}) {
    // Afficher le skeleton loading
    const tableContainer = document.querySelector('#formationsTable').closest('.table-responsive');
    if (tableContainer) {
        tableContainer.style.position = 'relative';
        const skeleton = document.createElement('div');
        skeleton.id = 'skeleton-loading';
        skeleton.innerHTML = `
            <div style="position: absolute; top: 0; left: 0; right: 0; bottom: 0; background: white; z-index: 1000; display: flex; align-items: center; justify-content: center;">
                <div class="text-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Chargement...</span>
                    </div>
                    <div class="mt-2">Chargement des données...</div>
                </div>
            </div>
        `;
        tableContainer.appendChild(skeleton);
    }
    
    // Construire l'URL avec les paramètres de filtrage
    const url = new URL("{{ path('app_formation_list') }}", window.location.origin);
    Object.keys(filters).forEach(key => {
        if (filters[key] && filters[key] !== '') {
            url.searchParams.append(key, filters[key]);
        }
    });
    
    fetch(url)
        .then(response => response.json())
        .then(data => {
            // Masquer le skeleton loading
            const skeleton = document.getElementById('skeleton-loading');
            if (skeleton) {
                skeleton.remove();
            }
            
            // Vider la table DataTable
            formationsTable.clear();
            
            // Ajouter les données
            data.forEach(formation => {
                const statutBadge = getStatutBadge(formation.statut, formation.statut_couleur);
                formationsTable.row.add([
                    formation.id,
                    formation.titre,
                    formation.service,
                    formation.fonds,
                    `${formation.datePrevueDebut} - ${formation.datePrevueFin}`,
                    formation.dureePrevue,
                    formation.budgetPrevu,
                    statutBadge,
                    `<div class="dropdown" style="position: relative;">
                                        <button class="btn btn-sm btn-outline-secondary" type="button" data-bs-toggle="dropdown" aria-expanded="false" style="position: relative; z-index: 1;">
                    <i class="fa fa-ellipsis-h"></i>
                </button>
                        <ul class="dropdown-menu dropdown-menu-end" style="position: absolute; z-index: 99999; right: 0; left: auto;">
                            <li><a class="dropdown-item" href="/formation/${formation.id}">
                                <i class="fa fa-eye text-info"></i> Voir
                            </a></li>
                            ${formation.statut_code !== "prevue_executee" ? 
                                `<li><a class="dropdown-item" href="/formation/${formation.id}/edit">
                                    <i class="fa fa-edit text-warning"></i> Modifier
                                </a></li>` : ""
                            }
                            <li><a class="dropdown-item" href="#" onclick="deleteFormation(${formation.id})">
                                <i class="fa fa-trash text-danger"></i> Supprimer
                            </a></li>
                        </ul>
                    </div>`
                ]);
            });
            
            // Redessiner la table
            formationsTable.draw();
        })
        .catch(error => {
            // Masquer le skeleton loading en cas d'erreur
            const skeleton = document.getElementById('skeleton-loading');
            if (skeleton) {
                skeleton.remove();
            }
            console.error('Erreur:', error);
            showToast('Erreur lors du chargement des formations', 'error');
        });
}

// Obtenir les valeurs des filtres
function getFilters() {
    return {
        statut: document.getElementById('statutFilter').value,
        service: document.getElementById('serviceFilter').value,
        periode: document.getElementById('periodeFilter').value,
        participant: document.getElementById('participantFilter').value
    };
}

// Appliquer les filtres
function applyFilters() {
    const filters = getFilters();
    loadFormations(filters);
}

// Réinitialiser les filtres
function resetFilters() {
    document.getElementById('statutFilter').value = '';
    document.getElementById('serviceFilter').value = '';
    document.getElementById('periodeFilter').value = '';
    document.getElementById('participantFilter').value = '';
    
    loadFormations();
}

// Exporter en PDF
function exportPdf() {
    const filters = getFilters();
    const url = new URL("{{ path('app_formation_export_pdf') }}", window.location.origin);
    
    Object.keys(filters).forEach(key => {
        if (filters[key] && filters[key] !== '') {
            url.searchParams.append(key, filters[key]);
        }
    });
    
    // Ouvrir dans un nouvel onglet pour télécharger le PDF
    window.open(url.toString(), '_blank');
}

                // Fonction pour obtenir le badge de statut
                function getStatutBadge(statut, couleur) {
                    return `<span class="badge bg-${couleur}">${statut}</span>`;
                }

// Fonction pour supprimer une formation
function deleteFormation(id) {
    if (confirm('Êtes-vous sûr de vouloir supprimer cette formation ?')) {
        fetch(`/formation/${id}`, {
            method: 'DELETE'
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showToast(data.message, 'success');
                loadFormations();
            } else {
                showToast(data.message, 'error');
            }
        })
        .catch(error => {
            console.error('Erreur:', error);
            showToast('Erreur lors de la suppression', 'error');
        });
    }
}
</script>
{% endblock %}
