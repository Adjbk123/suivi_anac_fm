{% extends 'base.html.twig' %}

{% block title %}Gestion des Services{% endblock %}

{% block breadcrumb %}
<ul class="breadcrumb">
	<li class="breadcrumb-item"><a href="#">GESTION</a></li>
	<li class="breadcrumb-item active">SERVICES</li>
</ul>
{% endblock %}

{% block page_title %}
<h1 class="page-header">
	Gestion des Services <small>Administration des services par direction</small>
</h1>
{% endblock %}

{% block buttons %}
<div class="d-flex gap-2">
	<button type="button" class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#serviceModal" onclick="resetForm()">
		<i class="fa fa-plus"></i> Nouveau Service
	</button>
	<a href="{{ path('app_service_export_pdf') }}" class="btn btn-success btn-sm">
		<i class="fa fa-file-pdf"></i> Exporter PDF
	</a>
</div>
{% endblock %}

{% block body %}
<div class="row">
	<div class="col-xl-12">
		<div class="card">
			<div class="card-body">
				<div class="table-responsive">
					<table class="table table-hover" id="servicesTable">
						<thead class="table-secondary">
							<tr>
								<th>ID</th>
								<th>Libellé</th>
								<th>Description</th>
								<th>Direction</th>
								                        <th><i class="fa fa-cogs"></i></th>
							</tr>
						</thead>
						<tbody>
							<!-- Les données seront chargées via AJAX -->
						</tbody>
					</table>
				</div>
			</div>
		</div>
	</div>
</div>

<!-- Modal pour créer/modifier un service -->
<div class="modal fade" id="serviceModal" tabindex="-1" aria-labelledby="serviceModalLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="serviceModalLabel">Nouveau Service</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<form id="serviceForm">
				<div class="modal-body">
					<input type="hidden" id="serviceId">
					<div class="mb-3">
						<label for="libelle" class="form-label">Libellé *</label>
						<input type="text" class="form-control" id="libelle" name="libelle" required>
					</div>
					<div class="mb-3">
						<label for="direction_id" class="form-label">Direction *</label>
						<select class="form-control" id="direction_id" name="direction_id" required>
							<option value="">Sélectionner une direction</option>
						</select>
					</div>
					<div class="mb-3">
						<label for="description" class="form-label">Description</label>
						<textarea class="form-control" id="description" name="description" rows="3"></textarea>
					</div>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
					<button type="submit" class="btn btn-primary" id="submitBtn">
						<span class="btn-text">Enregistrer</span>
						<span class="btn-spinner d-none">
							<i class="fa fa-spinner fa-spin"></i> Enregistrement...
						</span>
					</button>
				</div>
			</form>
		</div>
	</div>
</div>
{% endblock %}

{% block javascripts %}
<script>
let editingId = null;
let servicesTable = null;

// Initialiser DataTable au chargement de la page
document.addEventListener('DOMContentLoaded', function() {
    initializeDataTable();
    loadServices();
    loadDirections();
});

// Initialiser DataTable
function initializeDataTable() {
    servicesTable = $('#servicesTable').DataTable({
        language: {
            "sProcessing":     "Traitement en cours...",
            "sSearch":         "Rechercher&nbsp;:",
            "sLengthMenu":     "Afficher _MENU_ éléments",
            "sInfo":           "Affichage de l'élément _START_ à _END_ sur _TOTAL_ éléments",
            "sInfoEmpty":      "Affichage de l'élément 0 à 0 sur 0 élément",
            "sInfoFiltered":   "(filtré de _MAX_ éléments au total)",
            "sInfoPostFix":    "",
            "sLoadingRecords": "Chargement...",
            "sZeroRecords":    "Aucun élément à afficher",
            "sEmptyTable":     "Aucune donnée disponible dans le tableau",
            "oPaginate": {
                "sFirst":    '<i class="fa fa-angle-double-left" style="font-size: 12px;"></i>',
                "sPrevious": '<i class="fa fa-angle-left" style="font-size: 12px;"></i>',
                "sNext":     '<i class="fa fa-angle-right" style="font-size: 12px;"></i>',
                "sLast":     '<i class="fa fa-angle-double-right" style="font-size: 12px;"></i>'
            },
            "oAria": {
                "sSortAscending":  ": activer pour trier la colonne par ordre croissant",
                "sSortDescending": ": activer pour trier la colonne par ordre décroissant"
            }
        },
        responsive: false,
        pageLength: 10,
        lengthMenu: [[5, 10, 25, 50, -1], [5, 10, 25, 50, "Tous"]],
        order: [[0, 'asc']],
        columnDefs: [
            {
                targets: -1, // Dernière colonne (Actions)
                orderable: false,
                searchable: false
            }
        ],
        dom: '<"row"<"col-sm-12 col-md-6"l><"col-sm-12 col-md-6"f>>' +
             '<"row"<"col-sm-12"tr>>' +
             '<"row"<"col-sm-12 col-md-5"i><"col-sm-12 col-md-7"p>>',
        buttons: [
            {
                extend: 'copy',
                text: '<i class="fa fa-copy"></i> Copier',
                className: 'btn btn-sm btn-outline-secondary'
            },
            {
                extend: 'csv',
                text: '<i class="fa fa-file-csv"></i> CSV',
                className: 'btn btn-sm btn-outline-secondary'
            },
            {
                extend: 'excel',
                text: '<i class="fa fa-file-excel"></i> Excel',
                className: 'btn btn-sm btn-outline-secondary'
            },
            {
                extend: 'pdf',
                text: '<i class="fa fa-file-pdf"></i> PDF',
                className: 'btn btn-sm btn-outline-secondary'
            },
            {
                extend: 'print',
                text: '<i class="fa fa-print"></i> Imprimer',
                className: 'btn btn-sm btn-outline-secondary'
            }
        ]
    });
}

// Fonction pour charger les services
function loadServices() {
    // Afficher le skeleton loading
    const tableContainer = document.querySelector('#servicesTable').closest('.table-responsive');
    if (tableContainer) {
        tableContainer.style.position = 'relative';
        const skeleton = document.createElement('div');
        skeleton.id = 'skeleton-loading';
        skeleton.innerHTML = `
            <div style="position: absolute; top: 0; left: 0; right: 0; bottom: 0; background: white; z-index: 1000; display: flex; align-items: center; justify-content: center;">
                <div class="text-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Chargement...</span>
                    </div>
                    <div class="mt-2">Chargement des données...</div>
                </div>
            </div>
        `;
        tableContainer.appendChild(skeleton);
    }
    
    fetch('{{ path('app_service_list') }}')
        .then(response => response.json())
        .then(data => {
            // Masquer le skeleton loading
            const skeleton = document.getElementById('skeleton-loading');
            if (skeleton) {
                skeleton.remove();
            }
            
            // Vider la table DataTable
            servicesTable.clear();
            
            // Ajouter les données
            data.forEach(service => {
                servicesTable.row.add([
                    service.id,
                    service.libelle,
                    service.description || '-',
                    service.direction,
                    `<div class="dropdown" style="position: relative;">
                                        <button class="btn btn-sm btn-outline-secondary" type="button" data-bs-toggle="dropdown" aria-expanded="false" style="position: relative; z-index: 1;">
                    <i class="fa fa-ellipsis-h"></i>
                </button>
                        <ul class="dropdown-menu dropdown-menu-end" style="position: absolute; z-index: 99999; right: 0; left: auto;">
                            <li><a class="dropdown-item" href="#" onclick="editService(${service.id})">
                                <i class="fa fa-edit text-warning"></i> Modifier
                            </a></li>
                            <li><a class="dropdown-item" href="#" onclick="deleteService(${service.id})">
                                <i class="fa fa-trash text-danger"></i> Supprimer
                            </a></li>
                        </ul>
                    </div>`
                ]);
            });
            
            // Redessiner la table
            servicesTable.draw();
        })
        .catch(error => {
            // Masquer le skeleton loading en cas d'erreur
            const skeleton = document.getElementById('skeleton-loading');
            if (skeleton) {
                skeleton.remove();
            }
            console.error('Erreur:', error);
            showToast('Erreur lors du chargement des services', 'error');
        });
}

// Fonction pour charger les directions
function loadDirections() {
    fetch('{{ path('app_service_directions_list') }}')
        .then(response => response.json())
        .then(data => {
            const select = document.getElementById('direction_id');
            select.innerHTML = '<option value="">Sélectionner une direction</option>';
            
            data.forEach(direction => {
                const option = document.createElement('option');
                option.value = direction.id;
                option.textContent = direction.libelle;
                select.appendChild(option);
            });
        })
        .catch(error => {
            console.error('Erreur:', error);
            showToast('Erreur lors du chargement des directions', 'error');
        });
}

// Fonction pour réinitialiser le formulaire
function resetForm() {
    editingId = null;
    document.getElementById('serviceForm').reset();
    document.getElementById('serviceModalLabel').textContent = 'Nouveau Service';
}

// Fonction pour éditer un service
function editService(id) {
    editingId = id;
    fetch(`{{ path('app_service_show', {'id': 'PLACEHOLDER'}) }}`.replace('PLACEHOLDER', id))
        .then(response => response.json())
        .then(data => {
            document.getElementById('libelle').value = data.libelle;
            document.getElementById('description').value = data.description || '';
            document.getElementById('direction_id').value = data.direction_id || '';
            document.getElementById('serviceModalLabel').textContent = 'Modifier le Service';
            new bootstrap.Modal(document.getElementById('serviceModal')).show();
        })
        .catch(error => {
            console.error('Erreur:', error);
            showToast('Erreur lors du chargement du service', 'error');
        });
}

// Fonction pour supprimer un service
function deleteService(id) {
    if (confirm('Êtes-vous sûr de vouloir supprimer ce service ?')) {
        fetch(`{{ path('app_service_delete', {'id': 'PLACEHOLDER'}) }}`.replace('PLACEHOLDER', id), {
            method: 'DELETE'
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showToast(data.message, 'success');
                loadServices();
            } else {
                showToast(data.message, 'error');
            }
        })
        .catch(error => {
            console.error('Erreur:', error);
            showToast('Erreur lors de la suppression', 'error');
        });
    }
}

// Fonction pour afficher le spinner sur le bouton
function showButtonSpinner() {
    const submitBtn = document.getElementById('submitBtn');
    const btnText = submitBtn.querySelector('.btn-text');
    const btnSpinner = submitBtn.querySelector('.btn-spinner');
    
    submitBtn.disabled = true;
    btnText.classList.add('d-none');
    btnSpinner.classList.remove('d-none');
}

// Fonction pour masquer le spinner sur le bouton
function hideButtonSpinner() {
    const submitBtn = document.getElementById('submitBtn');
    const btnText = submitBtn.querySelector('.btn-text');
    const btnSpinner = submitBtn.querySelector('.btn-spinner');
    
    submitBtn.disabled = false;
    btnText.classList.remove('d-none');
    btnSpinner.classList.add('d-none');
}

// Gestion de la soumission du formulaire
document.getElementById('serviceForm').addEventListener('submit', function(e) {
    e.preventDefault();
    
    // Afficher le spinner et désactiver le bouton
    showButtonSpinner();
    
    const formData = {
        libelle: document.getElementById('libelle').value,
        description: document.getElementById('description').value,
        direction_id: document.getElementById('direction_id').value
    };
    
    const url = editingId 
        ? `{{ path('app_service_edit', {'id': 'PLACEHOLDER'}) }}`.replace('PLACEHOLDER', editingId)
        : '{{ path('app_service_new') }}';
    
    const method = editingId ? 'PUT' : 'POST';
    
    fetch(url, {
        method: method,
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData)
    })
    .then(response => response.json())
    .then(data => {
        // Masquer le spinner et réactiver le bouton
        hideButtonSpinner();
        
        if (data.success) {
            showToast(data.message, 'success');
            bootstrap.Modal.getInstance(document.getElementById('serviceModal')).hide();
            loadServices();
            resetForm();
        } else {
            showToast(data.message, 'error');
        }
    })
    .catch(error => {
        // Masquer le spinner et réactiver le bouton en cas d'erreur
        hideButtonSpinner();
        console.error('Erreur:', error);
        showToast('Erreur lors de l\'enregistrement', 'error');
    });
});
</script>
{% endblock %}
