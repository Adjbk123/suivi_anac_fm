{% extends 'base.html.twig' %}

{% block title %}Gestion des Utilisateurs{% endblock %}

{% block breadcrumb %}
<ul class="breadcrumb">
	<li class="breadcrumb-item"><a href="#">GESTION</a></li>
	<li class="breadcrumb-item active">UTILISATEURS</li>
</ul>
{% endblock %}

{% block page_title %}
<h1 class="page-header">
	Gestion des Utilisateurs <small>Administration du personnel</small>
</h1>
{% endblock %}

{% block buttons %}
<div class="d-flex gap-2">
	<button type="button" class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#userModal" onclick="resetForm()">
		<i class="fa fa-plus"></i> Nouvel Utilisateur
	</button>
	<a href="{{ path('app_user_export_pdf') }}" class="btn btn-success btn-sm">
		<i class="fa fa-file-pdf"></i> Exporter PDF
	</a>
</div>
{% endblock %}

{% block body %}
<div class="row">
	<div class="col-xl-12">
		<div class="card">
			<div class="card-body">
				<div class="table-responsive">
					<table class="table table-hover" id="usersTable">
						<thead class="table-secondary">
							<tr>
								<th>ID</th>
								<th>Nom</th>
								<th>Prénom</th>
								<th>Email</th>
								<th>Matricule</th>
								<th>Service</th>
								<th>Domaine</th>
								<th>Poste</th>
								                        <th><i class="fa fa-cogs"></i></th>
							</tr>
						</thead>
						<tbody>
							<!-- Les données seront chargées via AJAX -->
						</tbody>
					</table>
				</div>
			</div>
		</div>
	</div>
</div>

<!-- Modal pour créer/modifier un utilisateur -->
<div class="modal fade" id="userModal" tabindex="-1" aria-labelledby="userModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-lg">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="userModalLabel">Nouvel Utilisateur</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<form id="userForm">
				<div class="modal-body">
					<input type="hidden" id="userId">
					
					<!-- Nom et Prénom sur la même ligne -->
					<div class="row mb-3">
						<div class="col-md-6">
							<label for="nom" class="form-label">Nom <span class="text-danger">*</span></label>
							<input type="text" class="form-control" id="nom" name="nom" required>
						</div>
						<div class="col-md-6">
							<label for="prenom" class="form-label">Prénom <span class="text-danger">*</span></label>
							<input type="text" class="form-control" id="prenom" name="prenom" required>
						</div>
					</div>
					
					<!-- Matricule et Poste sur la même ligne -->
					<div class="row mb-3">
						<div class="col-md-6">
							<label for="matricule" class="form-label">Matricule</label>
							<input type="text" class="form-control" id="matricule" name="matricule">
							<small class="form-text text-muted">Optionnel</small>
						</div>
						<div class="col-md-6">
							<label for="poste_id" class="form-label">Poste (optionnel)</label>
							<select class="form-control" id="poste_id" name="poste_id">
								<option value="">Sélectionner un poste</option>
							</select>
						</div>
					</div>
					
					<!-- Service et Domaine sur la même ligne -->
					<div class="row mb-3">
						<div class="col-md-6">
							<label for="service_id" class="form-label">Service <span class="text-danger">*</span></label>
							<select class="form-control" id="service_id" name="service_id" required>
								<option value="">Sélectionner un service</option>
							</select>
						</div>
						<div class="col-md-6">
							<label for="domaine_id" class="form-label">Domaine (optionnel)</label>
							<select class="form-control" id="domaine_id" name="domaine_id">
								<option value="">Sélectionner un domaine</option>
							</select>
						</div>
					</div>
					
					<!-- Email -->
					<div class="mb-3">
						<label for="email" class="form-label">Email <span class="text-danger">*</span></label>
						<input type="email" class="form-control" id="email" name="email" required>
					</div>
					
					<!-- Mot de passe -->
					<div class="mb-3">
						<label for="password" class="form-label" id="password-label">Mot de passe <span class="text-danger">*</span></label>
						<div class="position-relative">
							<input type="password" class="form-control" id="password" name="password">
							<button type="button" class="btn btn-link position-absolute end-0 top-0 h-100" onclick="togglePassword('password')" style="z-index: 10; border: none; background: none;">
								<i class="fa fa-eye" id="password-toggle-icon"></i>
							</button>
						</div>
						<small class="form-text text-muted">Laissez vide pour conserver le mot de passe actuel lors de la modification</small>
					</div>
					
					<!-- Rôles -->
					<div class="mb-3">
						<label for="roles" class="form-label">Rôles <span class="text-danger">*</span></label>
						<select class="form-control" id="roles" name="roles" required>
							<option value="">Sélectionner un rôle</option>
							<option value="ROLE_USER">Utilisateur (Lecture seule)</option>
							<option value="ROLE_EDITEUR">Éditeur (Création/Modification)</option>
							<option value="ROLE_DIRECTEUR">Directeur (Statistiques/Rapports)</option>
							<option value="ROLE_ADMIN">Administrateur (Accès complet)</option>
						</select>
						<small class="form-text text-muted">
							<strong>USER:</strong> Lecture seule | 
							<strong>EDITEUR:</strong> Création/Modification | 
							<strong>DIRECTEUR:</strong> Statistiques | 
							<strong>ADMIN:</strong> Accès complet
						</small>
					</div>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
					<button type="submit" class="btn btn-primary" id="submitBtn">
						<span class="btn-text">Enregistrer</span>
						<span class="btn-spinner d-none">
							<i class="fa fa-spinner fa-spin"></i> Enregistrement...
						</span>
					</button>
				</div>
			</form>
		</div>
	</div>
</div>
{% endblock %}

{% block javascripts %}
<script>
let editingId = null;
let usersTable = null;

// Fonction pour basculer l'affichage du mot de passe
function togglePassword(fieldId) {
    const passwordField = document.getElementById(fieldId);
    const toggleIcon = document.getElementById(fieldId + '-toggle-icon');
    
    if (passwordField.type === 'password') {
        passwordField.type = 'text';
        toggleIcon.classList.remove('fa-eye');
        toggleIcon.classList.add('fa-eye-slash');
    } else {
        passwordField.type = 'password';
        toggleIcon.classList.remove('fa-eye-slash');
        toggleIcon.classList.add('fa-eye');
    }
}

// Initialiser DataTable au chargement de la page
document.addEventListener('DOMContentLoaded', function() {
    initializeDataTable();
    loadUsers();
    loadServices();
    loadDomaines();
    loadPostes();
});

// Initialiser DataTable
function initializeDataTable() {
    usersTable = $('#usersTable').DataTable({
        language: {
            "sProcessing":     "Traitement en cours...",
            "sSearch":         "Rechercher&nbsp;:",
            "sLengthMenu":     "Afficher _MENU_ éléments",
            "sInfo":           "Affichage de l'élément _START_ à _END_ sur _TOTAL_ éléments",
            "sInfoEmpty":      "Affichage de l'élément 0 à 0 sur 0 élément",
            "sInfoFiltered":   "(filtré de _MAX_ éléments au total)",
            "sInfoPostFix":    "",
            "sLoadingRecords": "Chargement...",
            "sZeroRecords":    "Aucun élément à afficher",
            "sEmptyTable":     "Aucune donnée disponible dans le tableau",
            "oPaginate": {
                "sFirst":    '<i class="fa fa-angle-double-left" style="font-size: 12px;"></i>',
                "sPrevious": '<i class="fa fa-angle-left" style="font-size: 12px;"></i>',
                "sNext":     '<i class="fa fa-angle-right" style="font-size: 12px;"></i>',
                "sLast":     '<i class="fa fa-angle-double-right" style="font-size: 12px;"></i>'
            },
            "oAria": {
                "sSortAscending":  ": activer pour trier la colonne par ordre croissant",
                "sSortDescending": ": activer pour trier la colonne par ordre décroissant"
            }
        },
        responsive: false,
        pageLength: 10,
        lengthMenu: [[5, 10, 25, 50, -1], [5, 10, 25, 50, "Tous"]],
        order: [[0, 'asc']],
        columnDefs: [
            {
                targets: -1, // Dernière colonne (Actions)
                orderable: false,
                searchable: false
            }
        ],
        dom: '<"row"<"col-sm-12 col-md-6"l><"col-sm-12 col-md-6"f>>' +
             '<"row"<"col-sm-12"tr>>' +
             '<"row"<"col-sm-12 col-md-5"i><"col-sm-12 col-md-7"p>>',
        buttons: [
            {
                extend: 'copy',
                text: '<i class="fa fa-copy"></i> Copier',
                className: 'btn btn-sm btn-outline-secondary'
            },
            {
                extend: 'csv',
                text: '<i class="fa fa-file-csv"></i> CSV',
                className: 'btn btn-sm btn-outline-secondary'
            },
            {
                extend: 'excel',
                text: '<i class="fa fa-file-excel"></i> Excel',
                className: 'btn btn-sm btn-outline-secondary'
            },
            {
                extend: 'pdf',
                text: '<i class="fa fa-file-pdf"></i> PDF',
                className: 'btn btn-sm btn-outline-secondary'
            },
            {
                extend: 'print',
                text: '<i class="fa fa-print"></i> Imprimer',
                className: 'btn btn-sm btn-outline-secondary'
            }
        ]
    });
}

    // Fonction pour charger les utilisateurs
    function loadUsers() {
        // Afficher le skeleton loading
        const tableContainer = document.querySelector('#usersTable').closest('.table-responsive');
        if (tableContainer) {
            tableContainer.style.position = 'relative';
            const skeleton = document.createElement('div');
            skeleton.id = 'skeleton-loading';
            skeleton.innerHTML = `
                <div style="position: absolute; top: 0; left: 0; right: 0; bottom: 0; background: white; z-index: 1000; display: flex; align-items: center; justify-content: center;">
                    <div class="text-center">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Chargement...</span>
                        </div>
                        <div class="mt-2">Chargement des données...</div>
                    </div>
                </div>
            `;
            tableContainer.appendChild(skeleton);
        }
    
    fetch("{{ path('app_user_list') }}")
        .then(response => response.json())
        .then(data => {
            // Masquer le skeleton loading
            const skeleton = document.getElementById('skeleton-loading');
            if (skeleton) {
                skeleton.remove();
            }
            
            // Vider la table DataTable
            usersTable.clear();
            
            // Ajouter les données
            data.forEach(user => {
                usersTable.row.add([
                    user.id,
                    user.nom,
                    user.prenom,
                    user.email,
                    user.matricule,
                    user.service,
                    user.domaine,
                    user.poste,
                    `<div class="dropdown" style="position: relative;">
                                        <button class="btn btn-sm btn-outline-secondary" type="button" data-bs-toggle="dropdown" aria-expanded="false" style="position: relative; z-index: 1;">
                    <i class="fa fa-ellipsis-h"></i>
                </button>
                        <ul class="dropdown-menu dropdown-menu-end" style="position: absolute; z-index: 99999; right: 0; left: auto;">
                            <li><a class="dropdown-item" href="/user/${user.id}/roles">
                                <i class="fa fa-user-shield text-info"></i> Gérer les rôles
                            </a></li>
                            <li><a class="dropdown-item" href="#" onclick="editUser(${user.id})">
                                <i class="fa fa-edit text-warning"></i> Modifier
                            </a></li>
                            <li><a class="dropdown-item" href="#" onclick="deleteUser(${user.id})">
                                <i class="fa fa-trash text-danger"></i> Supprimer
                            </a></li>
                        </ul>
                    </div>`
                ]);
            });
            
            // Redessiner la table
            usersTable.draw();
        })
        .catch(error => {
            // Masquer le skeleton loading en cas d'erreur
            const skeleton = document.getElementById('skeleton-loading');
            if (skeleton) {
                skeleton.remove();
            }
            console.error('Erreur:', error);
            showToast('Erreur lors du chargement des utilisateurs', 'error');
        });
}

// Fonction pour charger les services
function loadServices() {
    fetch("{{ path('app_user_services_list') }}")
        .then(response => response.json())
        .then(data => {
            const select = document.getElementById('service_id');
            select.innerHTML = '<option value="">Sélectionner un service</option>';
            
            data.forEach(service => {
                const option = document.createElement('option');
                option.value = service.id;
                option.textContent = `${service.libelle} (${service.direction})`;
                select.appendChild(option);
            });
        })
        .catch(error => {
            console.error('Erreur:', error);
            showToast('Erreur lors du chargement des services', 'error');
        });
}

    // Fonction pour charger les domaines
    function loadDomaines() {
        fetch("{{ path('app_user_domaines_list') }}")
            .then(response => response.json())
            .then(data => {
                const select = document.getElementById('domaine_id');
                select.innerHTML = '<option value="">Sélectionner un domaine</option>';
                
                data.forEach(domaine => {
                    const option = document.createElement('option');
                    option.value = domaine.id;
                    option.textContent = domaine.libelle;
                    select.appendChild(option);
                });
            })
            .catch(error => {
                console.error('Erreur:', error);
                showToast('Erreur lors du chargement des domaines', 'error');
            });
    }

    // Fonction pour charger les postes
    function loadPostes() {
        fetch("{{ path('app_user_postes_list') }}")
            .then(response => response.json())
            .then(data => {
                const select = document.getElementById('poste_id');
                select.innerHTML = '<option value="">Sélectionner un poste</option>';
                
                data.forEach(poste => {
                    const option = document.createElement('option');
                    option.value = poste.id;
                    option.textContent = poste.libelle;
                    select.appendChild(option);
                });
            })
            .catch(error => {
                console.error('Erreur:', error);
                showToast('Erreur lors du chargement des postes', 'error');
            });
    }

// Fonction pour réinitialiser le formulaire
function resetForm() {
    editingId = null;
    document.getElementById('userForm').reset();
    document.getElementById('userModalLabel').textContent = 'Nouvel Utilisateur';
    
    // Remettre le label du mot de passe à son état initial
    const passwordLabel = document.getElementById('password-label');
    passwordLabel.innerHTML = 'Mot de passe <span class="text-danger">*</span>';
}

// Fonction pour éditer un utilisateur
function editUser(id) {
    editingId = id;
    fetch(`{{ path('app_user_show', {'id': 'PLACEHOLDER'}) }}`.replace('PLACEHOLDER', id))
        .then(response => response.json())
        .then(data => {
                         document.getElementById('nom').value = data.nom;
             document.getElementById('prenom').value = data.prenom;
             document.getElementById('email').value = data.email || '';
             document.getElementById('matricule').value = data.matricule || '';
             document.getElementById('password').value = ''; // Ne pas afficher le mot de passe
             document.getElementById('service_id').value = data.service_id || '';
             document.getElementById('domaine_id').value = data.domaine_id || '';
             document.getElementById('poste_id').value = data.poste_id || '';
            document.getElementById('userModalLabel').textContent = 'Modifier l\'Utilisateur';
            
            // Ajuster le label du mot de passe pour la modification
            const passwordLabel = document.getElementById('password-label');
            passwordLabel.innerHTML = 'Nouveau mot de passe <span class="text-muted">(optionnel)</span>';
            
            // Charger le rôle de l'utilisateur
            document.getElementById('roles').value = data.roles || 'ROLE_USER';
            
            new bootstrap.Modal(document.getElementById('userModal')).show();
        })
        .catch(error => {
            console.error('Erreur:', error);
            showToast('Erreur lors du chargement de l\'utilisateur', 'error');
        });
}

// Fonction pour supprimer un utilisateur
function deleteUser(id) {
    if (confirm('Êtes-vous sûr de vouloir supprimer cet utilisateur ?')) {
        fetch(`{{ path('app_user_delete', {'id': 'PLACEHOLDER'}) }}`.replace('PLACEHOLDER', id), {
            method: 'DELETE'
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showToast(data.message, 'success');
                loadUsers();
            } else {
                showToast(data.message, 'error');
            }
        })
        .catch(error => {
            console.error('Erreur:', error);
            showToast('Erreur lors de la suppression', 'error');
        });
    }
}

// Fonction pour afficher le spinner sur le bouton
function showButtonSpinner() {
    const submitBtn = document.getElementById('submitBtn');
    const btnText = submitBtn.querySelector('.btn-text');
    const btnSpinner = submitBtn.querySelector('.btn-spinner');
    
    submitBtn.disabled = true;
    btnText.classList.add('d-none');
    btnSpinner.classList.remove('d-none');
}

// Fonction pour masquer le spinner sur le bouton
function hideButtonSpinner() {
    const submitBtn = document.getElementById('submitBtn');
    const btnText = submitBtn.querySelector('.btn-text');
    const btnSpinner = submitBtn.querySelector('.btn-spinner');
    
    submitBtn.disabled = false;
    btnText.classList.remove('d-none');
    btnSpinner.classList.add('d-none');
}

// Gestion de la soumission du formulaire
document.getElementById('userForm').addEventListener('submit', function(e) {
    e.preventDefault();
    
    // Validation côté client
    const passwordValue = document.getElementById('password').value;
    
    // Vérifier que le mot de passe est fourni lors de la création d'un nouvel utilisateur
    if (!editingId && (!passwordValue || passwordValue.trim() === '')) {
        showToast('Le mot de passe est requis pour créer un nouvel utilisateur', 'error');
        hideButtonSpinner();
        return;
    }
    
    // Afficher le spinner et désactiver le bouton
    showButtonSpinner();
    
         const formData = {
         nom: document.getElementById('nom').value,
         prenom: document.getElementById('prenom').value,
         email: document.getElementById('email').value,
         matricule: document.getElementById('matricule').value || null,
         service_id: document.getElementById('service_id').value,
         domaine_id: document.getElementById('domaine_id').value || null,
         poste_id: document.getElementById('poste_id').value || null,
         roles: document.getElementById('roles').value
     };
     
     // Ajouter le mot de passe seulement s'il est fourni
     if (passwordValue && passwordValue.trim() !== '') {
         formData.password = passwordValue;
     }
    
    const url = editingId 
        ? `{{ path('app_user_edit', {'id': 'PLACEHOLDER'}) }}`.replace('PLACEHOLDER', editingId)
        : "{{ path('app_user_new') }}";
    
    const method = editingId ? 'PUT' : 'POST';
    
    fetch(url, {
        method: method,
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData)
    })
    .then(response => response.json())
    .then(data => {
        // Masquer le spinner et réactiver le bouton
        hideButtonSpinner();
        
        if (data.success) {
            showToast(data.message, 'success');
            bootstrap.Modal.getInstance(document.getElementById('userModal')).hide();
            loadUsers();
            resetForm();
        } else {
            showToast(data.message, 'error');
        }
    })
    .catch(error => {
        // Masquer le spinner et réactiver le bouton en cas d'erreur
        hideButtonSpinner();
        console.error('Erreur:', error);
        showToast('Erreur lors de l\'enregistrement', 'error');
    });
});
</script>
{% endblock %}
