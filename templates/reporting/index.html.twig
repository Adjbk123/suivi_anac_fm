{% extends 'base.html.twig' %}

{% block title %}ANAC BENIN - Reporting{% endblock %}

{% block breadcrumb %}
<ul class="breadcrumb">
	<li class="breadcrumb-item"><a href="#">REPORTING</a></li>
	<li class="breadcrumb-item active">FILTRES ET ANALYSES</li>
</ul>
{% endblock %}

{% block page_title %}
<h1 class="page-header">
	Reporting <small>Analyses et statistiques détaillées</small>
</h1>
{% endblock %}

{% block stylesheets %}
<!-- Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<style>
.filter-card {
    border: 1px solid #dee2e6;
    border-radius: 8px;
    padding: 15px;
    margin-bottom: 20px;
    background: #f8f9fa;
}

.filter-section {
    margin-bottom: 15px;
}

.filter-section label {
    font-weight: 600;
    color: #495057;
    margin-bottom: 5px;
    font-size: 0.8rem;
    white-space: nowrap;
}

.filter-section .form-select,
.filter-section .form-control {
    font-size: 0.8rem;
    padding: 0.25rem 0.5rem;
    height: auto;
}

.filter-section {
    margin-bottom: 0.5rem;
}

.results-section {
    display: none;
    margin-top: 30px;
}

.section-card {
    border: 1px solid #dee2e6;
    border-radius: 8px;
    margin-bottom: 20px;
    background: white;
}

.section-header {
    background: #f8f9fa;
    padding: 15px;
    border-bottom: 1px solid #dee2e6;
    border-radius: 8px 8px 0 0;
}

.section-content {
    padding: 20px;
}

.stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 15px;
    margin-bottom: 20px;
}

.stat-item {
    text-align: center;
    padding: 15px;
    background: #f8f9fa;
    border-radius: 6px;
    border-left: 4px solid #007bff;
}

.stat-number {
    font-size: 2em;
    font-weight: bold;
    color: #007bff;
}

.stat-label {
    font-size: 0.9em;
    color: #6c757d;
    margin-top: 5px;
}

.export-buttons {
    margin-top: 20px;
    padding: 15px;
    background: #f8f9fa;
    border-radius: 6px;
    text-align: center;
}

.table-responsive {
    max-height: 400px;
    overflow-y: auto;
    width: 100%;
}

.table {
    width: 100% !important;
    margin-bottom: 0;
}

.table th,
.table td {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    max-width: 200px;
}

.loading {
    display: none;
    text-align: center;
    padding: 40px;
}

.chart-container {
    position: relative;
    height: 300px;
    margin: 20px 0;
}
</style>
{% endblock %}

{% block body %}
<!-- Section Filtres Horizontale -->
<div class="filter-card mb-4">
    <h5 class="mb-3"><i class="fa fa-filter"></i> Filtres</h5>
    <form id="filtersForm">
        <div class="row">
            <!-- Colonne 9 pour les champs -->
            <div class="col-md-9">
                <!-- Première ligne des champs -->
                <div class="row mb-3">
                    <!-- Direction -->
                    <div class="col-md-3">
                        <div class="filter-section">
                            <label>Direction</label>
                            <select class="form-select" name="direction_id" id="directionSelect">
                                <option value="">Toutes</option>
                            </select>
                        </div>
                    </div>

                    <!-- Service -->
                    <div class="col-md-3">
                        <div class="filter-section">
                            <label>Service</label>
                            <select class="form-select" name="service_id" id="serviceSelect">
                                <option value="">Tous</option>
                            </select>
                        </div>
                    </div>

                    <!-- Statut -->
                    <div class="col-md-3">
                        <div class="filter-section">
                            <label>Statut</label>
                            <select class="form-select" name="statut_id" id="statutSelect">
                                <option value="">Tous</option>
                            </select>
                        </div>
                    </div>

                    <!-- Type de fonds -->
                    <div class="col-md-3">
                        <div class="filter-section">
                            <label>Type de financement</label>
                            <select class="form-select" name="type_fonds_id" id="typeFondsSelect">
                                <option value="">Tous</option>
                            </select>
                        </div>
                    </div>
                </div>

                <!-- Deuxième ligne des champs -->
                <div class="row">
                    <!-- Lieu -->
                    <div class="col-md-4">
                        <div class="filter-section">
                            <label>Lieu</label>
                            <input type="text" class="form-control" name="lieu" placeholder="Ville, pays...">
                        </div>
                    </div>

                    <!-- Période -->
                    <div class="col-md-4">
                        <div class="filter-section">
                            <label>Période</label>
                            <div class="row">
                                <div class="col-6">
                                    <input type="date" class="form-control" name="date_debut" id="dateDebut" placeholder="Date début">
                                </div>
                                <div class="col-6">
                                    <input type="date" class="form-control" name="date_fin" id="dateFin" placeholder="Date fin">
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Année -->
                    <div class="col-md-4">
                        <div class="filter-section">
                            <label>Année</label>
                            <select class="form-select" name="annee" id="anneeSelect">
                                <option value="{{ currentYear }}" selected>{{ currentYear }}</option>
                            </select>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Colonne 3 pour les boutons avec bordure -->
            <div class="col-md-3">
                <div class="filter-section d-flex align-items-end h-100" style="border: 1px solid #dee2e6; border-radius: 6px; padding: 15px; background: #f8f9fa;">
                    <div class="w-100">
                        <!-- Type d'activité en haut -->
                        <div class="mb-3">
                            <label style="font-size: 0.8rem; margin-bottom: 0.25rem;">Type d'activité</label>
                            <select class="form-select form-select-sm" name="type_activite" style="font-size: 0.8rem; padding: 0.25rem 0.5rem;">
                                <option value="all">Tous</option>
                                <option value="formation">Formations</option>
                                <option value="mission">Missions</option>
                            </select>
                        </div>
                        
                        <button type="submit" class="btn btn-primary btn-sm w-100 mb-2">
                            <i class="fa fa-search"></i> Appliquer les filtres
                        </button>
                        <button type="button" class="btn btn-secondary btn-sm w-100" id="resetFilters">
                            <i class="fa fa-refresh"></i> Réinitialiser
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </form>
</div>

<!-- Section Résultats -->
<div class="row">
    <div class="col-12">
        <div class="loading" id="loadingIndicator">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Chargement...</span>
            </div>
            <p class="mt-2">Génération du rapport en cours...</p>
        </div>

        <div class="results-section" id="resultsContainer">
            <!-- 1. Résumé Global -->
            <div class="section-card" id="resumeSection">
                <div class="section-header">
                    <h5 class="mb-0"><i class="fa fa-chart-pie"></i> Résumé Global</h5>
                </div>
                <div class="section-content">
                    <div class="stats-grid" id="resumeStats">
                        <!-- Stats will be populated by JS -->
                    </div>
                </div>
            </div>

            <!-- 2. Détails Formations -->
            <div class="section-card" id="formationsSection">
                <div class="section-header">
                    <h5 class="mb-0"><i class="fa fa-graduation-cap"></i> Détails Formations</h5>
                </div>
                <div class="section-content">
                    <div class="row">
                        <div class="col-12">
                            <div class="table-responsive">
                                <table class="table table-striped w-100" id="reportingFormationsTable">
                                    <thead>
                                        <tr>
                                            <th>Titre</th>
                                            <th>Service</th>
                                            <th>Dates</th>
                                            <th>Statut</th>
                                            <th>Budget</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <!-- Data will be populated by JS -->
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- 3. Détails Missions -->
            <div class="section-card" id="missionsSection">
                <div class="section-header">
                    <h5 class="mb-0"><i class="fa fa-plane"></i> Détails Missions</h5>
                </div>
                <div class="section-content">
                    <div class="row">
                        <div class="col-12">
                            <div class="table-responsive">
                                <table class="table table-striped w-100" id="reportingMissionsTable">
                                    <thead>
                                        <tr>
                                            <th>Titre</th>
                                            <th>Service</th>
                                            <th>Dates</th>
                                            <th>Statut</th>
                                            <th>Budget</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <!-- Data will be populated by JS -->
                                    </tbody>
                                </table>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="chart-container">
                                <canvas id="missionsChart"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- 4. Par Direction -->
            <div class="section-card" id="directionsSection">
                <div class="section-header">
                    <h5 class="mb-0"><i class="fa fa-building"></i> Analyse par Direction</h5>
                </div>
                <div class="section-content">
                    <div class="table-responsive">
                        <table class="table table-striped" id="directionsTable">
                            <thead>
                                <tr>
                                    <th>Direction</th>
                                    <th>Formations</th>
                                    <th>Missions</th>
                                    <th>Taux d'exécution</th>
                                    <th>Budget total</th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- Data will be populated by JS -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- 5. Évolution temporelle -->
            <div class="section-card" id="evolutionSection">
                <div class="section-header">
                    <h5 class="mb-0"><i class="fa fa-line-chart"></i> Évolution Temporelle</h5>
                </div>
                <div class="section-content">
                    <div class="chart-container">
                        <canvas id="evolutionChart"></canvas>
                    </div>
                </div>
            </div>

            <!-- 6. Indicateurs Clés -->
            <div class="section-card" id="indicateursSection">
                <div class="section-header">
                    <h5 class="mb-0"><i class="fa fa-dashboard"></i> Indicateurs Clés</h5>
                </div>
                <div class="section-content">
                    <div class="stats-grid" id="indicateursStats">
                        <!-- Stats will be populated by JS -->
                    </div>
                </div>
            </div>

            <!-- Export -->
            <div class="export-buttons">
                <button type="button" class="btn btn-danger me-2" id="exportPdf">
                    <i class="fa fa-file-pdf-o"></i> Exporter en PDF
                </button>
                <button type="button" class="btn btn-success me-2" id="exportExcel">
                    <i class="fa fa-file-excel-o"></i> Exporter en Excel
                </button>
                <button type="button" class="btn btn-info" id="print">
                    <i class="fa fa-print"></i> Imprimer
                </button>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    const filtersForm = document.getElementById('filtersForm');
    const loadingIndicator = document.getElementById('loadingIndicator');
    const resultsContainer = document.getElementById('resultsContainer');
    const resetFiltersBtn = document.getElementById('resetFilters');
    const exportPdfBtn = document.getElementById('exportPdf');

    let currentData = null;

    // Charger les données des filtres au démarrage
    loadFiltersData();
    
    // Définir les dates par défaut (début et fin du mois actuel)
    setDefaultDates();
    
    // Charger les données par défaut (mois actuel)
    loadData();

    // Gestion du formulaire de filtres
    filtersForm.addEventListener('submit', function(e) {
        e.preventDefault();
        loadData();
    });

    // Réinitialisation des filtres
    resetFiltersBtn.addEventListener('click', function() {
        filtersForm.reset();
        filtersForm.querySelector('[name="annee"]').value = '{{ currentYear }}';
        setDefaultDates(); // Remettre les dates par défaut
        resultsContainer.style.display = 'none';
    });

    // Export PDF
    exportPdfBtn.addEventListener('click', function() {
        if (!currentData) return;
        
        const formData = new FormData(filtersForm);
        
        fetch('{{ path('app_reporting_export_pdf') }}', {
            method: 'POST',
            body: formData
        })
        .then(response => response.blob())
        .then(blob => {
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'rapport_' + new Date().toISOString().slice(0, 10) + '.pdf';
            a.click();
            window.URL.revokeObjectURL(url);
        })
        .catch(error => {
            console.error('Erreur export PDF:', error);
            showToast('Erreur lors de l\'export PDF', 'error');
        });
    });

    // Fonction pour définir les dates par défaut
    function setDefaultDates() {
        const now = new Date();
        const year = now.getFullYear();
        const month = now.getMonth();
        
        // Premier jour du mois actuel
        const firstDay = new Date(year, month, 1);
        const dateDebut = firstDay.toISOString().split('T')[0];
        
        // Dernier jour du mois actuel
        const lastDay = new Date(year, month + 1, 0);
        const dateFin = lastDay.toISOString().split('T')[0];
        
        // Définir les valeurs par défaut
        document.getElementById('dateDebut').value = dateDebut;
        document.getElementById('dateFin').value = dateFin;
    }

    // Fonction pour charger les données des filtres
    function loadFiltersData() {
        fetch('{{ path('app_reporting_api_filters') }}')
        .then(response => response.json())
        .then(data => {
            console.log('Données reçues:', data);
            
            // Remplir les directions
            const directionSelect = document.getElementById('directionSelect');
            directionSelect.innerHTML = '<option value="">Toutes</option>';
            if (data.directions && data.directions.length > 0) {
                data.directions.forEach(direction => {
                    const option = document.createElement('option');
                    option.value = direction.id;
                    option.textContent = direction.libelle;
                    directionSelect.appendChild(option);
                });
            }

            // Remplir les services
            const serviceSelect = document.getElementById('serviceSelect');
            serviceSelect.innerHTML = '<option value="">Tous</option>';
            if (data.services && data.services.length > 0) {
                data.services.forEach(service => {
                    const option = document.createElement('option');
                    option.value = service.id;
                    option.textContent = service.libelle;
                    serviceSelect.appendChild(option);
                });
            }

            // Remplir les statuts
            const statutSelect = document.getElementById('statutSelect');
            statutSelect.innerHTML = '<option value="">Tous</option>';
            if (data.statuts && data.statuts.length > 0) {
                data.statuts.forEach(statut => {
                    const option = document.createElement('option');
                    option.value = statut.id;
                    option.textContent = statut.libelle;
                    statutSelect.appendChild(option);
                });
            }

            // Remplir les types de fonds
            const typeFondsSelect = document.getElementById('typeFondsSelect');
            typeFondsSelect.innerHTML = '<option value="">Tous</option>';
            if (data.typeFonds && data.typeFonds.length > 0) {
                data.typeFonds.forEach(fonds => {
                    const option = document.createElement('option');
                    option.value = fonds.id;
                    option.textContent = fonds.libelle;
                    typeFondsSelect.appendChild(option);
                });
            }

            // Remplir les années
            const anneeSelect = document.getElementById('anneeSelect');
            anneeSelect.innerHTML = '';
            if (data.years && data.years.length > 0) {
                data.years.forEach(year => {
                    const option = document.createElement('option');
                    option.value = year;
                    option.textContent = year;
                    anneeSelect.appendChild(option);
                });
            }
        })
        .catch(error => {
            console.error('Erreur lors du chargement des filtres:', error);
        });
    }

    // Fonction pour charger les données
    function loadData() {
        loadingIndicator.style.display = 'block';
        resultsContainer.style.display = 'none';

        const formData = new FormData(filtersForm);
        
        // Ajouter le mois actuel par défaut
        const currentMonth = new Date().getMonth() + 1;
        formData.append('mois', currentMonth);

        // Charger les données section par section
        Promise.all([
            loadResumeData(formData),
            loadFormationsData(formData),
            loadMissionsData(formData),
            loadDirectionsData(formData),
            loadPeriodesData(formData),
            loadStatutsData(formData),
            loadIndicateursData(formData)
        ]).then(() => {
            loadingIndicator.style.display = 'none';
            resultsContainer.style.display = 'block';
        }).catch(error => {
            console.error('Erreur:', error);
            loadingIndicator.style.display = 'none';
            showToast('Erreur lors du chargement des données', 'error');
        });
    }

    // Fonction pour charger le résumé
    function loadResumeData(formData) {
        return fetch('{{ path('app_reporting_data_resume') }}', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            populateResumeGlobal(data);
        });
    }

    // Fonction pour charger les formations
    function loadFormationsData(formData) {
        return fetch('{{ path('app_reporting_data_formations') }}', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            populateFormations(data);
        });
    }

    // Fonction pour charger les missions
    function loadMissionsData(formData) {
        return fetch('{{ path('app_reporting_data_missions') }}', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            populateMissions(data);
        });
    }

    // Fonction pour charger les données par direction
    function loadDirectionsData(formData) {
        return fetch('{{ path('app_reporting_data_directions') }}', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            populateDirections(data);
        });
    }

    // Fonction pour charger les données par période
    function loadPeriodesData(formData) {
        return fetch('{{ path('app_reporting_data_periodes') }}', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            populateEvolution(data);
        });
    }

    // Fonction pour charger les données de statuts
    function loadStatutsData(formData) {
        return fetch('{{ path('app_reporting_data_statuts') }}', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            // populateStatuts(data); // À implémenter si nécessaire
        });
    }

    // Fonction pour charger les indicateurs
    function loadIndicateursData(formData) {
        return fetch('{{ path('app_reporting_data_indicateurs') }}', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            populateIndicateurs(data);
        });
    }



    function populateResumeGlobal(resume) {
        const container = document.getElementById('resumeStats');
        const tauxExecution = resume.missions_prevues + resume.formations_prevues > 0 
            ? ((resume.missions_realisees + resume.formations_realisees) / (resume.missions_prevues + resume.formations_prevues) * 100).toFixed(1)
            : 0;

        container.innerHTML = `
            <div class="table-responsive">
                <table class="table table-bordered table-striped w-100">
                    <thead>
                        <tr>
                            <th>Indicateur</th>
                            <th>Valeur</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>Formations prévues</td>
                            <td>${resume.formations_prevues}</td>
                        </tr>
                        <tr>
                            <td>Formations réalisées</td>
                            <td>${resume.formations_realisees}</td>
                        </tr>
                        <tr>
                            <td>Missions prévues</td>
                            <td>${resume.missions_prevues}</td>
                        </tr>
                        <tr>
                            <td>Missions réalisées</td>
                            <td>${resume.missions_realisees}</td>
                        </tr>
                        <tr>
                            <td>Budget total prévu</td>
                            <td>${new Intl.NumberFormat('fr-FR').format(resume.budget_total_prevu)} FCFA</td>
                        </tr>
                        <tr>
                            <td>Budget total réalisé</td>
                            <td>${new Intl.NumberFormat('fr-FR').format(resume.budget_total_realise)} FCFA</td>
                        </tr>
                        <tr>
                            <td>Taux d'exécution global</td>
                            <td>${tauxExecution}%</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        `;
    }

    function populateFormations(formations) {
        const tbody = document.querySelector('#reportingFormationsTable tbody');
        let html = '';
        
        console.log('Formations data:', formations);
        
        if (formations.liste && formations.liste.length > 0) {
            formations.liste.forEach(formation => {
                console.log('Formation:', formation);
                
                 // Gestion des dates (maintenant des chaînes de caractères)
                let dateDebut = '-';
                let dateFin = '-';
                
                if (formation.datePrevueDebut) {
                    try {
                        dateDebut = new Date(formation.datePrevueDebut).toLocaleDateString('fr-FR');
                    } catch (e) {
                        console.error('Erreur date début:', e);
                        dateDebut = '-';
                    }
                }
                
                if (formation.datePrevueFin) {
                    try {
                        dateFin = new Date(formation.datePrevueFin).toLocaleDateString('fr-FR');
                    } catch (e) {
                        console.error('Erreur date fin:', e);
                        dateFin = '-';
                    }
                }
                
                const dates = `${dateDebut} - ${dateFin}`;
                const budget = formation.budgetPrevu ? new Intl.NumberFormat('fr-FR').format(formation.budgetPrevu) + ' FCFA' : '-';
                
                html += `
                    <tr>
                        <td>${formation.titre || '-'}</td>
                        <td>${formation.service ? formation.service.libelle : '-'}</td>
                        <td>${dates}</td>
                        <td><span class="badge bg-${formation.statutActivite ? formation.statutActivite.couleur : 'secondary'}">${formation.statutActivite ? formation.statutActivite.libelle : '-'}</span></td>
                        <td>${budget}</td>
                    </tr>
                `;
            });
        } else {
            html = '<tr><td colspan="5" class="text-center">Aucune formation trouvée</td></tr>';
        }
        
        tbody.innerHTML = html;
    }

    function populateMissions(missions) {
        const tbody = document.querySelector('#reportingMissionsTable tbody');
        let html = '';
        
        console.log('Missions data:', missions);
        
        if (missions.liste && missions.liste.length > 0) {
            missions.liste.forEach(mission => {
                console.log('Mission:', mission);
                
                // Gestion des dates (maintenant des chaînes de caractères)
                let dateDebut = '-';
                let dateFin = '-';
                
                if (mission.datePrevueDebut) {
                    try {
                        dateDebut = new Date(mission.datePrevueDebut).toLocaleDateString('fr-FR');
                    } catch (e) {
                        console.error('Erreur date début:', e);
                        dateDebut = '-';
                    }
                }
                
                if (mission.datePrevueFin) {
                    try {
                        dateFin = new Date(mission.datePrevueFin).toLocaleDateString('fr-FR');
                    } catch (e) {
                        console.error('Erreur date fin:', e);
                        dateFin = '-';
                    }
                }
                
                const dates = `${dateDebut} - ${dateFin}`;
                const budget = mission.budgetPrevu ? new Intl.NumberFormat('fr-FR').format(mission.budgetPrevu) + ' FCFA' : '-';
                
                html += `
                    <tr>
                        <td>${mission.titre || '-'}</td>
                        <td>${mission.service ? mission.service.libelle : '-'}</td>
                        <td>${dates}</td>
                        <td><span class="badge bg-${mission.statutActivite ? mission.statutActivite.couleur : 'secondary'}">${mission.statutActivite ? mission.statutActivite.libelle : '-'}</span></td>
                        <td>${budget}</td>
                    </tr>
                `;
            });
        } else {
            html = '<tr><td colspan="5" class="text-center">Aucune mission trouvée</td></tr>';
        }
        
        tbody.innerHTML = html;
    }

    function populateDirections(parDirection) {
        const tbody = document.querySelector('#directionsTable tbody');
        let html = '';

        // Combiner les données formations et missions par direction
        const directions = {};
        
        parDirection.formations.forEach(item => {
            if (!directions[item.direction_name]) {
                directions[item.direction_name] = { formations: 0, missions: 0, formations_exec: 0, missions_exec: 0 };
            }
            directions[item.direction_name].formations = item.total;
            directions[item.direction_name].formations_exec = item.executed;
        });

        parDirection.missions.forEach(item => {
            if (!directions[item.direction_name]) {
                directions[item.direction_name] = { formations: 0, missions: 0, formations_exec: 0, missions_exec: 0 };
            }
            directions[item.direction_name].missions = item.total;
            directions[item.direction_name].missions_exec = item.executed;
        });

        Object.entries(directions).forEach(([directionName, data]) => {
            const totalActivites = data.formations + data.missions;
            const totalExecutees = data.formations_exec + data.missions_exec;
            const tauxExecution = totalActivites > 0 ? (totalExecutees / totalActivites * 100).toFixed(1) : 0;

            html += `
                <tr>
                    <td>${directionName}</td>
                    <td>${data.formations} (${data.formations_exec} réalisées)</td>
                    <td>${data.missions} (${data.missions_exec} réalisées)</td>
                    <td><span class="badge bg-${tauxExecution >= 70 ? 'success' : tauxExecution >= 50 ? 'warning' : 'danger'}">${tauxExecution}%</span></td>
                    <td>-</td>
                </tr>
            `;
        });

        tbody.innerHTML = html || '<tr><td colspan="5" class="text-center">Aucune donnée disponible</td></tr>';
    }

    function populateEvolution(parPeriode) {
        const ctx = document.getElementById('evolutionChart').getContext('2d');
        
        new Chart(ctx, {
            type: 'line',
            data: {
                labels: ['Jan', 'Fév', 'Mar', 'Avr', 'Mai', 'Jun', 'Jul', 'Aoû', 'Sep', 'Oct', 'Nov', 'Déc'],
                datasets: [{
                    label: 'Formations',
                    data: Object.values(parPeriode.formations),
                    borderColor: 'rgb(75, 192, 192)',
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    tension: 0.1
                }, {
                    label: 'Missions',
                    data: Object.values(parPeriode.missions),
                    borderColor: 'rgb(255, 99, 132)',
                    backgroundColor: 'rgba(255, 99, 132, 0.2)',
                    tension: 0.1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            stepSize: 1
                        }
                    }
                }
            }
        });
    }

    function populateIndicateurs(indicateurs) {
        const container = document.getElementById('indicateursStats');
        const ecartClass = indicateurs.ecart_budget >= 0 ? 'text-success' : 'text-danger';
        const ecartIcon = indicateurs.ecart_budget >= 0 ? '↗' : '↘';

        container.innerHTML = `
            <div class="stat-item">
                <div class="stat-number">${indicateurs.taux_execution_budget.toFixed(1)}%</div>
                <div class="stat-label">Taux d'exécution budget</div>
            </div>
            <div class="stat-item">
                <div class="stat-number">${new Intl.NumberFormat('fr-FR').format(indicateurs.budget_prevu_total)} FCFA</div>
                <div class="stat-label">Budget prévu total</div>
            </div>
            <div class="stat-item">
                <div class="stat-number">${new Intl.NumberFormat('fr-FR').format(indicateurs.budget_reel_total)} FCFA</div>
                <div class="stat-label">Budget réel total</div>
            </div>
            <div class="stat-item">
                <div class="stat-number ${ecartClass}">${ecartIcon} ${new Intl.NumberFormat('fr-FR').format(Math.abs(indicateurs.ecart_budget))} FCFA</div>
                <div class="stat-label">Écart budgétaire</div>
            </div>
        `;
    }

    function showToast(message, type = 'info') {
        // Fonction pour afficher les notifications
        console.log(`${type.toUpperCase()}: ${message}`);
    }
});
</script>
{% endblock %}
