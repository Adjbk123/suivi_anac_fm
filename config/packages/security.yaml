security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    
    # Hiérarchie des rôles
    role_hierarchy:
        ROLE_EDITEUR: ROLE_USER
        ROLE_DIRECTEUR: ROLE_EDITEUR
        ROLE_ADMIN: ROLE_DIRECTEUR
    
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            form_login:
                login_path: app_login
                check_path: app_login
                enable_csrf: true
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # Routes publiques
        - { path: /login, roles: PUBLIC_ACCESS }
        - { path: /reset-password, roles: PUBLIC_ACCESS }
        
        # Routes nécessitant au minimum ROLE_USER
        - { path: /, roles: ROLE_USER }
        - { path: /profile, roles: ROLE_USER }
        
        # Routes nécessitant ROLE_EDITEUR
        - { path: /formation/create, roles: ROLE_EDITEUR }
        - { path: /formation/new, roles: ROLE_EDITEUR }
        - { path: /formation/edit, roles: ROLE_EDITEUR }
        - { path: /formation/update, roles: ROLE_EDITEUR }
        - { path: /mission/create, roles: ROLE_EDITEUR }
        - { path: /mission/new, roles: ROLE_EDITEUR }
        - { path: /mission/edit, roles: ROLE_EDITEUR }
        - { path: /mission/update, roles: ROLE_EDITEUR }
        
        # Routes nécessitant ROLE_DIRECTEUR
        - { path: /reporting, roles: ROLE_DIRECTEUR }
        - { path: /statistics, roles: ROLE_DIRECTEUR }
        
        # Routes nécessitant ROLE_ADMIN
        - { path: /admin, roles: ROLE_ADMIN }
        - { path: /user/new, roles: ROLE_ADMIN }
        - { path: /user/edit, roles: ROLE_ADMIN }
        - { path: /user/delete, roles: ROLE_ADMIN }
        - { path: /direction, roles: ROLE_ADMIN }
        - { path: /domaine, roles: ROLE_ADMIN }
        - { path: /service, roles: ROLE_ADMIN }
        - { path: /poste, roles: ROLE_ADMIN }
        - { path: /typefonds, roles: ROLE_ADMIN }
        - { path: /categoriedepense, roles: ROLE_ADMIN }
        - { path: /statut, roles: ROLE_ADMIN }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
